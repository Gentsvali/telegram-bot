import os
import logging
import asyncio
import aiohttp
from quart import Quart, request, jsonify
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from solders.pubkey import Pubkey
from signal import signal, SIGINT, SIGTERM

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or "–í–ê–®_TELEGRAM_TOKEN"
HELIUS_API_KEY = os.getenv("HELIUS_API_KEY") or "–í–ê–®_HELIUS_KEY"
USER_ID = int(os.getenv("USER_ID", "–í–ê–®_USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or "https://–≤–∞—à-–¥–æ–º–µ–Ω.xyz/bot"
PROGRAM_ID = Pubkey.from_string(os.getenv("PROGRAM_ID", "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo"))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

app = Quart(__name__)
app.running = False
known_pools = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def fetch_dlmm_pools():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Helius API"""
    try:
        url = f"https://mainnet.helius-rpc.com/?api-key={HELIUS_API_KEY}"
        payload = {
            "jsonrpc": "2.0",
            "id": "dlmm-fetcher",
            "method": "getAssetsByAuthority",
            "params": {
                "authorityAddress": str(PROGRAM_ID),
                "page": 1,
                "limit": 100
            }
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("result", {}).get("items", [])
                logger.error(f"–û—à–∏–±–∫–∞ {resp.status}: {await resp.text()}")
                return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ fetch_dlmm_pools: {e}")
        return []

async def monitor_pools():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    while app.running:
        try:
            pools = await fetch_dlmm_pools()
            new_pools = [p for p in pools if p["id"] not in known_pools]
            
            if new_pools:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤: {len(new_pools)}")
                for pool in new_pools:
                    pool_id = pool["id"]
                    known_pools.add(pool_id)
                    await send_telegram_notification(pool_id)
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(30)

async def send_telegram_notification(pool_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        message = (
            "üÜï –ù–æ–≤—ã–π DLMM –ø—É–ª!\n"
            f"ID: `{pool_id}`\n"
            f"[Solscan](https://solscan.io/account/{pool_id})\n"
            f"[Meteora](https://app.meteora.ag/pool/{pool_id})"
        )
        await bot.bot.send_message(
            chat_id=USER_ID,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DLMM –ø—É–ª–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω!")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ø—É–ª–æ–≤: {len(known_pools)}")

# --- –í–µ–±—Ö—É–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ---
@app.before_serving
async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    app.running = True
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CommandHandler("status", status))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    await bot.bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"üåç –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    asyncio.create_task(monitor_pools())
    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

@app.after_serving
async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    app.running = False
    await bot.bot.delete_webhook()
    logger.info("üõë –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")

@app.route('/bot', methods=['POST'])
async def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    if request.method == "POST":
        data = await request.get_json()
        update = Update.de_json(data, bot.bot)
        await bot.process_update(update)
    return jsonify({"status": "ok"}), 200

@app.route('/')
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        "status": "running",
        "webhook": WEBHOOK_URL is not None,
        "pools_tracked": len(known_pools)
    })

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def handle_signal(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    asyncio.create_task(shutdown())
    exit(0)

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal(SIGINT, handle_signal)
    signal(SIGTERM, handle_signal)
    
    try:
        app.run(host='0.0.0.0', port=10000)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")