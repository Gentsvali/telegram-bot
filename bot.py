import os
import logging
import asyncio
import json
import base64
from datetime import datetime, timedelta
from quart import Quart, request
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler
import httpx
import pytz
from json import JSONDecodeError
import requests
from solana.rpc.websocket_api import connect
from solders.pubkey import Pubkey

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_OWNER = "Gentsvali"
REPO_NAME = "telegram-bot"
FILE_PATH = "filters.json"
USER_ID = int(os.getenv("USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Meteora
API_URL = "https://dlmm-api.meteora.ag/pair/all_by_groups"
DEFAULT_FILTERS = {
    "disable_filters": False,
    "stable_coin": "USDC",
    "bin_steps": [20, 80, 100, 125, 250],
    "min_tvl": 10000.0,
    "min_fdv": 500000.0,
    "base_fee_max": 1.0,
    "fee_tvl_ratio_24h_min": 0.1,
    "volume_1h_min": 5000.0,
    "volume_5m_min": 1000.0,
    "dynamic_fee_tvl_ratio_min": 0.5,
    "verified_only": True
}
current_filters = DEFAULT_FILTERS.copy()
last_checked_pools = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)
    .concurrent_updates(True)
    .http_version("1.1")
    .get_updates_http_version("1.1")
    .build()
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")
application.add_error_handler(error_handler)

app = Quart(__name__)

@app.before_serving
async def startup():
    await application.initialize()
    await application.start()
    await application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    await load_filters(application)
    asyncio.create_task(track_pools())  # –ó–∞–ø—É—Å–∫ WebSocket
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

@app.after_serving
async def shutdown():
    await application.stop()
    await application.shutdown()

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    await update.message.reply_text(
        "üöÄ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø—É–ª–æ–≤ Meteora\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/filters - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/setfilter - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "/checkpools - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    response = (
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
        f"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {current_filters['stable_coin']}\n"
        f"‚Ä¢ Bin Steps: {', '.join(map(str, current_filters['bin_steps']))}\n"
        f"‚Ä¢ –ú–∏–Ω TVL: ${current_filters['min_tvl']:,.2f}\n"
        f"‚Ä¢ –ú–∏–Ω FDV: ${current_filters['min_fdv']:,.2f}\n"
        f"‚Ä¢ –ú–∞–∫—Å –∫–æ–º–∏—Å—Å–∏—è: {current_filters['base_fee_max']}%\n"
        f"‚Ä¢ –ú–∏–Ω –∫–æ–º–∏—Å—Å–∏—è/TVL: {current_filters['fee_tvl_ratio_24h_min']}%\n"
        f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (1—á): ${current_filters['volume_1h_min']:,.2f}\n"
        f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (5–º): ${current_filters['volume_5m_min']:,.2f}\n"
        f"‚Ä¢ –ú–∏–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {current_filters['dynamic_fee_tvl_ratio_min']}%"
    )
    await update.message.reply_text(response)

async def set_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    
    try:
        args = context.args
        if len(args) < 2:
            raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setfilter [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]")

        param = args[0].lower()
        value = args[1]

        if param == "stable_coin":
            if value.upper() not in ["USDC", "SOL"]:
                raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: USDC –∏–ª–∏ SOL")
            current_filters[param] = value.upper()
        
        elif param == "bin_steps":
            current_filters[param] = [int(v.strip()) for v in value.split(',')]
        
        elif param in ["min_tvl", "min_fdv", "base_fee_max", 
                      "fee_tvl_ratio_24h_min", "volume_1h_min", 
                      "volume_5m_min", "dynamic_fee_tvl_ratio_min"]:
            current_filters[param] = float(value)
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")

        await save_filters(update, context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(f"‚úÖ {param} –æ–±–Ω–æ–≤–ª–µ–Ω: {value}")
    
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É–ª–æ–≤
async def track_pools():
    ws_url = "wss://api.mainnet-beta.solana.com"
    program_id = Pubkey.from_string("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo")

    while True:
        try:
            async with connect(ws_url) as websocket:
                await websocket.program_subscribe(program_id, encoding="jsonParsed")
                logger.info("WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Solana")

                async for response in websocket:
                    try:
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                        logger.info(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {response}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                        if isinstance(response, dict):
                            pool_data = response.get("result", {}).get("value", {})
                            await handle_pool_change(pool_data)
                        else:
                            logger.error("–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                    except KeyError:
                        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö WebSocket")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—É–ª–∞—Ö
async def handle_pool_change(raw_data):
    try:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
        if isinstance(raw_data, str):
            pool_data = json.loads(raw_data)
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî —ç—Ç–æ –±–∞–π—Ç—ã, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É, –∞ –∑–∞—Ç–µ–º –≤ JSON
        elif isinstance(raw_data, bytes):
            pool_data = json.loads(raw_data.decode("utf-8"))
        else:
            pool_data = raw_data  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pool_data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(pool_data, dict):
            if filter_pool(pool_data):
                message = format_pool_message(pool_data)
                await application.bot.send_message(
                    chat_id=USER_ID,
                    text=message,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
        else:
            logger.error("–û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è JSON-—Å–æ–æ–±—â–µ–Ω–∏–π
async def update_filters_via_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return

    try:
        new_filters = json.loads(update.message.text)
        
        if not isinstance(new_filters, dict):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å.")

        for key, value in new_filters.items():
            if key in current_filters:
                current_filters[key] = value
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞: {key}")

        await save_filters(update, context)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_filters(update, context)

    except JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
async def get_filters_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters_json = json.dumps(current_filters, indent=4)
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n```json\n{filters_json}\n```", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å API
async def fetch_pools():
    try:
        params = {
            "sort_key": "volume",
            "order_by": "desc",
            "limit": 100,
            "include_unknown": not current_filters["verified_only"],
            "include_token_mints": [
                "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"
                if current_filters["stable_coin"] == "USDC"
                else "So11111111111111111111111111111111111111112"
            ]
        }

        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(API_URL, params=params)
            response.raise_for_status()
            data = response.json()
            return data.get("groups", [{}])[0].get("pairs", [])
    
    except Exception as e:
        logger.error(f"API Error: {str(e)}")
        return []

def load_filters_from_github():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ GitHub."""
    global current_filters
    try:
        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        content = response.json()["content"]
        decoded_content = base64.b64decode(content).decode("utf-8")
        loaded_filters = json.loads(decoded_content)
        current_filters.update(loaded_filters)
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ GitHub: {e}")

def save_filters_to_github():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ GitHub."""
    try:
        clean_filters = get_clean_filters()
        content = json.dumps(clean_filters, indent=4)
        encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")

        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        data = {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "content": encoded_content,
            "sha": requests.get(url, headers=headers).json().get("sha", "")
        }
        response = requests.put(url, headers=headers, json=data)
        response.raise_for_status()
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ GitHub: {e}")

def filter_pool(pool: dict) -> bool:
    if current_filters.get("disable_filters", False):
        return True  # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –≤—Å–µ—Ö –ø—É–ª–æ–≤

    try:
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        tvl = float(pool.get("liquidity", 0))
        if tvl <= 0:
            return False

        pool_metrics = {
            "bin_step": pool.get("bin_step", 999),
            "base_fee": float(pool.get("base_fee_percentage", 100)),
            "fee_24h": float(pool.get("fees_24h", 0)),
            "volume_1h": float(pool.get("volume", {}).get("hour_1", 0)),
            "volume_5m": float(pool.get("volume", {}).get("min_30", 0)) * 2,
            "dynamic_fee": float(pool.get("fee_tvl_ratio", {}).get("hour_1", 0)),
            "tvl": tvl
        }

        fee_tvl_ratio = (pool_metrics["fee_24h"] / pool_metrics["tvl"] * 100) if pool_metrics["tvl"] > 0 else 0

        conditions = [
            pool_metrics["bin_step"] in current_filters["bin_steps"],
            pool_metrics["base_fee"] <= current_filters["base_fee_max"],
            fee_tvl_ratio >= current_filters["fee_tvl_ratio_24h_min"],
            pool_metrics["volume_1h"] >= current_filters["volume_1h_min"],
            pool_metrics["volume_5m"] >= current_filters["volume_5m_min"],
            pool_metrics["dynamic_fee"] >= current_filters["dynamic_fee_tvl_ratio_min"],
            pool_metrics["tvl"] >= current_filters["min_tvl"]
        ]

        return all(conditions)
    
    except Exception as e:
        logger.error(f"Filter Error: {str(e)}")
        return False

def get_non_sol_token(mint_x: str, mint_y: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Solana."""
    sol_mint = "So11111111111111111111111111111111111111112"
    if mint_x == sol_mint:
        return mint_y
    elif mint_y == sol_mint:
        return mint_x
    else:
        return mint_x  # –ï—Å–ª–∏ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ Solana, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π

def save_filters_to_file():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª."""
    try:
        with open(FILE_PATH, "w") as file:
            json.dump(current_filters, file, indent=4)
        logger.info("–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª: {e}")

def load_filters_from_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    global current_filters
    try:
        if os.path.exists(FILE_PATH):
            with open(FILE_PATH, "r") as file:
                loaded_filters = json.load(file)
                current_filters.update(loaded_filters)
                logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ ‚úÖ")
        else:
            logger.info("–§–∞–π–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")

def get_clean_filters() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    return {
        "disable_filters": current_filters.get("disable_filters", False),
        "stable_coin": current_filters.get("stable_coin", "USDC"),
        "bin_steps": current_filters.get("bin_steps", [20, 80, 100, 125, 250]),
        "min_tvl": current_filters.get("min_tvl", 10000.0),
        "min_fdv": current_filters.get("min_fdv", 500000.0),
        "base_fee_max": current_filters.get("base_fee_max", 1.0),
        "fee_tvl_ratio_24h_min": current_filters.get("fee_tvl_ratio_24h_min", 0.1),
        "volume_1h_min": current_filters.get("volume_1h_min", 5000.0),
        "volume_5m_min": current_filters.get("volume_5m_min", 1000.0),
        "dynamic_fee_tvl_ratio_min": current_filters.get("dynamic_fee_tvl_ratio_min", 0.5),
        "verified_only": current_filters.get("verified_only", True)
    }

def format_pool_message(pool: dict) -> str:
    try:
        address = pool.get("address", "N/A")
        mint_x = pool.get("mint_x", "?")
        mint_y = pool.get("mint_y", "?")
        tvl = float(pool.get("liquidity", 0)) if pool.get("liquidity") else 0
        volume_1h = float(pool.get("volume", {}).get("hour_1", 0)) if pool.get("volume", {}).get("hour_1") else 0
        volume_5m = float(pool.get("volume", {}).get("min_30", 0)) * 2 if pool.get("volume", {}).get("min_30") else 0
        fee_tvl_ratio = (float(pool.get("fees_24h", 0)) / tvl * 100) if tvl > 0 else 0
        dynamic_fee = float(pool.get("fee_tvl_ratio", {}).get("hour_1", 0)) if pool.get("fee_tvl_ratio", {}).get("hour_1") else 0
        bin_step = pool.get("bin_step", "N/A")
        base_fee = pool.get("base_fee_percentage", "N/A")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
        sol_mint = "So11111111111111111111111111111111111111112"
        usdc_mint = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –≤—ã–±—Ä–∞–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö (SOL –∏–ª–∏ USDC)
        stable_coin = current_filters.get("stable_coin", "USDC")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USDC

        if stable_coin == "SOL":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω SOL, –∏—â–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å SOL
            if mint_x == sol_mint:
                paired_token = mint_y  # –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å SOL
            elif mint_y == sol_mint:
                paired_token = mint_x  # –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å SOL
            else:
                paired_token = mint_x  # –ï—Å–ª–∏ SOL –Ω–µ—Ç –≤ –ø–∞—Ä–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω USDC, –∏—â–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å USDC
            if mint_x == usdc_mint:
                paired_token = mint_y  # –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å USDC
            elif mint_y == usdc_mint:
                paired_token = mint_x  # –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –≤ –ø–∞—Ä–µ —Å USDC
            else:
                paired_token = mint_x  # –ï—Å–ª–∏ USDC –Ω–µ—Ç –≤ –ø–∞—Ä–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üî• *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É–ª—ã —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é* üî•\n\n"
            f"üî• *{paired_token[:4]}-{stable_coin}* ([üïí ~5h](https://t.me/meteora_pool_tracker_bot/?start=pool_info={address}_5m)) | "
            f"RugCheck: [üü¢1](https://rugcheck.xyz/tokens/{paired_token})\n"
            f"üîó [Meteora](https://app.meteora.ag/dlmm/{address}) | "
            f"[DexScreener](https://dexscreener.com/solana/{paired_token}) | "
            f"[GMGN](https://gmgn.ai/sol/token/{paired_token}) | "
            f"[TrenchRadar](https://trench.bot/bundles/{paired_token}?all=true)\n"
            f"üíé *Market Cap*: ${tvl / 1000:,.2f}K üîπ*TVL*: ${tvl:,.2f}K\n"
            f"üìä *–û–±—ä–µ–º*: ${volume_1h:,.2f}K üî∏ *Bin Step*: {bin_step} üíµ *Fees*: {base_fee}% | {dynamic_fee:.2f}%\n"
            f"ü§ë *–ü—Ä–∏–Ω—Ç (5m dynamic fee/TVL)*: {fee_tvl_ratio:.2f}%\n"
            f"ü™ô *–¢–æ–∫–µ–Ω*: {paired_token}"  # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        )
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ {pool.get('address')}: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ"

async def check_new_pools(context: ContextTypes.DEFAULT_TYPE):
    global last_checked_pools
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–æ–≤...")

    try:
        if not context or not hasattr(context, 'bot'):
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return

        pools = await fetch_pools()
        new_pools = []
        
        for pool in pools:
            if pool["address"] not in last_checked_pools:
                try:
                    if filter_pool(pool):
                        new_pools.append(pool)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞ {pool.get('address')}: {str(e)}")

        if new_pools:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
            for pool in new_pools:
                message = format_pool_message(pool)
                if message:
                    await context.bot.send_message(
                        chat_id=USER_ID,
                        text=message,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
            last_checked_pools.update(p["address"] for p in pools)
        else:
            logger.info("–ù–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
        await context.bot.send_message(
            chat_id=USER_ID,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–ª–æ–≤"
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("filters", show_filters))
application.add_handler(CommandHandler("setfilter", set_filter))
application.add_handler(CommandHandler("checkpools", check_new_pools))
application.add_handler(CommandHandler("getfiltersjson", get_filters_json))
application.add_handler(MessageHandler(filters=None, callback=update_filters_via_json))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
application.job_queue.run_repeating(check_new_pools, interval=300, first=10)

# –í–µ–±—Ö—É–∫
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    try:
        data = await request.get_json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"Webhook Error: {str(e)}")
        return '', 500

@app.route('/healthcheck')
def healthcheck():
    return {"status": "OK"}, 200

@app.route('/')
async def home():
    return {"status": "OK"}, 200

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def save_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ GitHub."""
    try:
        save_filters_to_github()
        logger.info("–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")

async def load_filters(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ GitHub."""
    global current_filters
    try:
        load_filters_from_github()
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=PORT)