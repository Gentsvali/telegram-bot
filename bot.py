import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URLS = {
    "meteora_pools": "https://api.meteora.ag/v2/pools",
    "dexscreener": "https://api.dexscreener.com/latest/dex/pairs/solana/{address}",
}
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
CHAT_ID = os.getenv("CHAT_ID")  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not CHAT_ID:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—É–ª–æ–≤
last_pools = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–∞—Ö –æ—Ç API Meteora
async def get_meteora_pools():
    try:
        response = requests.get(API_URLS["meteora_pools"])
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤ –æ—Ç Meteora: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–µ –æ—Ç DexScreener
async def get_dexscreener_pool(address: str):
    try:
        url = API_URLS["dexscreener"].format(address=address)
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç DexScreener: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤
async def track_new_pools():
    global last_pools
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—É–ª—ã –æ—Ç Meteora
    current_pools = await get_meteora_pools()
    if not current_pools:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç Meteora")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Solana
    solana_pools = [pool for pool in current_pools if pool.get("chain") == "Solana"]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø—É–ª—ã
    new_pools = [pool for pool in solana_pools if pool not in last_pools]

    if new_pools:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        for pool in new_pools:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –æ—Ç DexScreener
            dexscreener_data = await get_dexscreener_pool(pool.get("address"))
            if dexscreener_data:
                message = (
                    f"üéâ –ù–æ–≤—ã–π –ø—É–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Meteor!\n"
                    f"üîó –ü–∞—Ä–∞: {pool.get('pair')}\n"
                    f"üìä –û–±—ä–µ–º: {dexscreener_data.get('volume', 'N/A')}\n"
                    f"‚è≥ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {pool.get('timestamp')}"
                )
            else:
                message = (
                    f"üéâ –ù–æ–≤—ã–π –ø—É–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Meteor!\n"
                    f"üîó –ü–∞—Ä–∞: {pool.get('pair')}\n"
                    f"‚è≥ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {pool.get('timestamp')}"
                )
            await send_telegram_message(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—É–ª–æ–≤
        last_pools = solana_pools
    else:
        logger.info("–ù–æ–≤—ã—Ö –ø—É–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(message: str):
    try:
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        await application.bot.send_message(chat_id=CHAT_ID, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Meteor!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(track_new_pools, "interval", minutes=5)
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")