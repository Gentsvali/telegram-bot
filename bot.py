from dotenv import load_dotenv
import os
import logging
import sqlite3
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TELEGRAM_TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN") 
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8080))

if not all([TOKEN, SECRET_TOKEN, WEBHOOK_BASE]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = f"{WEBHOOK_BASE}/{TOKEN}"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
API_URLS = {
    "meteora_pools": "https://api.meteora.ag/v2/pools",  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π URL
    "dexscreener": "https://api.dexscreener.com/latest/dex/pairs/solana/{address}"
}

class Database:
    def __init__(self):
        self.conn = sqlite3.connect("bot_filters.db", check_same_thread=False)
        self._init_db()
        
    def _init_db(self):
        try:
            with self.conn:
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_filters (
                        user_id INTEGER PRIMARY KEY,
                        min_tvl REAL DEFAULT 0,
                        max_bin_step INTEGER DEFAULT 100,
                        token_type TEXT DEFAULT 'ALL'  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ALL
                    )
                """)
                logger.info("–¢–∞–±–ª–∏—Ü–∞ user_filters —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ Database –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

async def fetch_pools():
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            response = await client.get(
                API_URLS["meteora_pools"],
                headers={"User-Agent": "Mozilla/5.0"}
            )
            
            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text[:200]}")
                return []

            data = response.json()
            logger.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
            
            if not isinstance(data, list):
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
                return []

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—É–ª–æ–≤")
            return [pool for pool in data if validate_pool(pool)]  # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤: {str(e)}")
        return []

def validate_pool(pool: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞"""
    required_fields = {'address', 'tvl', 'bin_step', 'token_type'}
    return all(field in pool for field in required_fields)

async def format_pool_message(pool):
    try:
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ {pool['address']}")
        address = pool.get("address", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        dex_data = await get_dexscreener_data(address)
        
        message = (
            f"üîπ {pool.get('base_token', {}).get('symbol', 'N/A')}\n"
            f"‚Ä¢ TVL: {pool.get('tvl', 'N/A')}$\n"
            f"‚Ä¢ Bin Step: {pool.get('bin_step', 'N/A')}\n"
            f"‚Ä¢ –¢–∏–ø: {pool.get('token_type', 'N/A')}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {address[:15]}...\n"
            f"üìä DexScreener: {dex_data.get('url', '#')}"
        )
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

async def get_dexscreener_data(address: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(
                API_URLS["dexscreener"].format(address=address)
            )
            return response.json().get('pair', {})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DexScreener: {e}")
        return {}

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

def main():
    try:
        YOUR_USER_ID = 839443665
        db.update_user_filters(YOUR_USER_ID, {
            "min_tvl": 0,
            "max_bin_step": 100,
            "token_type": "ALL"  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤
        })
        
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å main() ...
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

if __name__ == "__main__":
    main()