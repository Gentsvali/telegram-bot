import os
import logging
import sys
import asyncio
import time
import json
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
from quart import Quart, request

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv

# Telegram Bot API
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
import httpx

# Solana WebSocket
from solana.rpc.commitment import Confirmed
import base58  
from solders.pubkey import Pubkey   
from solana.rpc.api import Client as Connection  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Client –≤–º–µ—Å—Ç–æ Connection

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
from json import JSONDecodeError

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
import requests 
import base64  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        logging.StreamHandler()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("solana").setLevel(logging.WARNING)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Solana WebSocket
logging.getLogger("asyncio").setLevel(logging.WARNING)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è asyncio

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TELEGRAM_TOKEN", "GITHUB_TOKEN", "USER_ID", "WEBHOOK_URL"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    error_message = (
        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    logger.error(error_message)
    raise ValueError(error_message)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_OWNER = "Gentsvali"
REPO_NAME = "telegram-bot"
FILE_PATH = "filters.json"
USER_ID = int(os.getenv("USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"  # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_FILTERS = {
    "disable_filters": False,  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    "stable_coin": "USDC",  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ (USDC –∏–ª–∏ SOL)
    "bin_steps": [20, 80, 100, 125, 250],  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —à–∞–≥–∏ –∫–æ—Ä–∑–∏–Ω
    "min_tvl": 10000.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL (–≤ $)
    "min_fdv": 500000.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è FDV (–≤ $)
    "base_fee_max": 1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è (–≤ %)
    "fee_tvl_ratio_24h_min": 0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∫ TVL –∑–∞ 24 —á–∞—Å–∞ (–≤ %)
    "volume_1h_min": 5000.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 1 —á–∞—Å (–≤ $)
    "volume_5m_min": 1000.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ $)
    "dynamic_fee_tvl_ratio_min": 0.5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –∫ TVL (–≤ %)
    "verified_only": True,  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É–ª—ã
    "min_listing_time": 7,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–∞ Meteora (–≤ –¥–Ω—è—Ö)
    "price_change_1h_min": 0.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1 —á–∞—Å (–≤ %)
    "price_change_5m_min": 0.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ %)
    "fee_change_1h_min": 0.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ 1 —á–∞—Å (–≤ %)
    "fee_change_5m_min": 0.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ %)
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
def validate_filters(filters: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    required_keys = [
        "disable_filters", "stable_coin", "bin_steps", "min_tvl", "min_fdv",
        "base_fee_max", "fee_tvl_ratio_24h_min", "volume_1h_min", "volume_5m_min",
        "dynamic_fee_tvl_ratio_min", "verified_only", "min_listing_time",
        "price_change_1h_min", "price_change_5m_min", "fee_change_1h_min", "fee_change_5m_min"
    ]
    return all(key in filters for key in required_keys)

if not validate_filters(DEFAULT_FILTERS):
    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
current_filters = DEFAULT_FILTERS.copy()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—É–ª–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
last_checked_pools = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    .concurrent_updates(True)  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    .http_version("1.1")  # –í–µ—Ä—Å–∏—è HTTP –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    .get_updates_http_version("1.1")  # –í–µ—Ä—Å–∏—è HTTP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    .build()
)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –±–æ—Ç–µ.
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        chat_id = update.effective_chat.id if update and update.effective_chat else USER_ID
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
application.add_error_handler(error_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Quart(__name__)

@app.before_serving
async def startup():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        await application.initialize()
        await application.start()
        logger.info("Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚úÖ")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        await application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/{TELEGRAM_TOKEN} ‚úÖ")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await load_filters(application)
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ WebSocket
        asyncio.create_task(track_pools())
        logger.info("–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ WebSocket –∑–∞–ø—É—â–µ–Ω–∞ ‚úÖ")

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã üöÄ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        raise

@app.after_serving
async def shutdown_app():
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Quart.
    """
    try:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        # –ü–æ—Ç–æ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if application.running:
            await application.stop()
            await application.shutdown()
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

async def shutdown_signal(signal, loop):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (SIGINT, SIGTERM).
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.name}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    await application.stop()
    await application.shutdown()
    loop.stop()

def handle_shutdown(signum, frame):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (SIGINT, SIGTERM) –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π shutdown.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    loop = asyncio.get_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    shutdown_task = loop.create_task(shutdown_signal(signal.Signals(signum), loop))
    
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    loop.run_until_complete(shutdown_task)
    loop.close()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, handle_shutdown)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
signal.signal(signal.SIGTERM, handle_shutdown)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç systemd)

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        await update.message.reply_text(
            "üöÄ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø—É–ª–æ–≤ Meteora\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/filters - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/setfilter - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "/checkpools - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /filters –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        response = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞: {current_filters['stable_coin']}\n"
            f"‚Ä¢ Bin Steps: {', '.join(map(str, current_filters['bin_steps']))}\n"
            f"‚Ä¢ –ú–∏–Ω TVL: ${current_filters['min_tvl']:,.2f}\n"
            f"‚Ä¢ –ú–∏–Ω FDV: ${current_filters['min_fdv']:,.2f}\n"
            f"‚Ä¢ –ú–∞–∫—Å –∫–æ–º–∏—Å—Å–∏—è: {current_filters['base_fee_max']}%\n"
            f"‚Ä¢ –ú–∏–Ω –∫–æ–º–∏—Å—Å–∏—è/TVL: {current_filters['fee_tvl_ratio_24h_min']}%\n"
            f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (1—á): ${current_filters['volume_1h_min']:,.2f}\n"
            f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (5–º): ${current_filters['volume_5m_min']:,.2f}\n"
            f"‚Ä¢ –ú–∏–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è: {current_filters['dynamic_fee_tvl_ratio_min']}%\n"
            f"‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: {'–î–∞' if current_filters['verified_only'] else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ú–∏–Ω –≤—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞: {current_filters['min_listing_time']} –¥–Ω–µ–π\n"
            f"‚Ä¢ –ú–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (1—á): {current_filters['price_change_1h_min']}%\n"
            f"‚Ä¢ –ú–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (5–º): {current_filters['price_change_5m_min']}%\n"
            f"‚Ä¢ –ú–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (1—á): {current_filters['fee_change_1h_min']}%\n"
            f"‚Ä¢ –ú–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (5–º): {current_filters['fee_change_5m_min']}%"
        )
        await update.message.reply_text(response)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /filters: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def set_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /setfilter –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        args = context.args
        if len(args) < 2:
            raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setfilter [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]")

        param = args[0].lower()
        value = args[1]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if param == "stable_coin":
            if value.upper() not in ["USDC", "SOL"]:
                raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: USDC –∏–ª–∏ SOL")
            current_filters[param] = value.upper()
        
        elif param == "bin_steps":
            current_filters[param] = [int(v.strip()) for v in value.split(',')]
        
        elif param in ["min_tvl", "min_fdv", "base_fee_max", 
                      "fee_tvl_ratio_24h_min", "volume_1h_min", 
                      "volume_5m_min", "dynamic_fee_tvl_ratio_min",
                      "min_listing_time", "price_change_1h_min",
                      "price_change_5m_min", "fee_change_1h_min",
                      "fee_change_5m_min"]:
            current_filters[param] = float(value)
        
        elif param == "verified_only":
            if value.lower() not in ["true", "false"]:
                raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: true –∏–ª–∏ false")
            current_filters[param] = value.lower() == "true"
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        await save_filters(update, context)
        await update.message.reply_text(f"‚úÖ {param} –æ–±–Ω–æ–≤–ª–µ–Ω: {value}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä {param} –Ω–∞ {value}")
    
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /setfilter: {e}", exc_info=True)

async def track_pools():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection = Connection("https://api.mainnet-beta.solana.com", "confirmed")
        program_id = Pubkey.from_string("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo")  # Meteora DLMM program ID

        while True:
            try:
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É–ª–æ–≤...")
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
                accounts = await connection.get_program_accounts(
                    program_id,
                    encoding="base64",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º base64 –≤–º–µ—Å—Ç–æ base58
                    filters=[
                        {
                            "dataSize": 165  # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö
                        }
                    ]
                )

                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(accounts)} –ø—É–ª–æ–≤")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç
                for account in accounts:
                    try:
                        pool_data = {
                            "pubkey": str(account.pubkey),
                            "account": {
                                "data": account.account.data,  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ base64
                                "executable": account.account.executable,
                                "lamports": account.account.lamports,
                                "owner": str(account.account.owner),
                            }
                        }

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—É–ª –Ω–æ–≤—ã–π
                        if pool_data["pubkey"] not in last_checked_pools:
                            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—É–ª: {pool_data['pubkey']}")
                            await handle_pool_change(pool_data)
                            last_checked_pools.add(pool_data["pubkey"])

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–ª–∞ {account.pubkey}: {e}")
                        continue

                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...")
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ track_pools: {e}")

def decode_pool_data(data: bytes) -> dict:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.
    """
    try:
        # –ü—Ä–∏–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞)
        decoded_data = {
            "mint_x": data[:32].hex(),  # –ü–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞ ‚Äî mint_x
            "mint_y": data[32:64].hex(),  # –°–ª–µ–¥—É—é—â–∏–µ 32 –±–∞–π—Ç–∞ ‚Äî mint_y
            "liquidity": int.from_bytes(data[64:72], byteorder="little"),  # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            "volume_1h": int.from_bytes(data[72:80], byteorder="little"),  # –û–±—ä–µ–º –∑–∞ 1 —á–∞—Å
            "volume_5m": int.from_bytes(data[80:88], byteorder="little"),  # –û–±—ä–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç
            "bin_step": int.from_bytes(data[88:96], byteorder="little"),  # –®–∞–≥ –∫–æ—Ä–∑–∏–Ω—ã
            "base_fee": int.from_bytes(data[96:104], byteorder="little") / 100,  # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è (–≤ %)
            "is_verified": bool(data[104]),  # –ü—Ä–æ–≤–µ—Ä–µ–Ω –ª–∏ –ø—É–ª
            "listing_time": int.from_bytes(data[105:113], byteorder="little"),  # –í—Ä–µ–º—è –ª–∏—Å—Ç–∏–Ω–≥–∞ (–≤ –¥–Ω—è—Ö)
            "price_change_1h": int.from_bytes(data[113:121], byteorder="little") / 100,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1 —á–∞—Å (–≤ %)
            "price_change_5m": int.from_bytes(data[121:129], byteorder="little") / 100,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ %)
            "fee_change_1h": int.from_bytes(data[129:137], byteorder="little") / 100,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ 1 —á–∞—Å (–≤ %)
            "fee_change_5m": int.from_bytes(data[137:145], byteorder="little") / 100,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ %)
        }
        return decoded_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞: {e}", exc_info=True)
        return {}

async def handle_pool_change(pool_data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞: {pool_data['pubkey']}")
        if filter_pool(pool_data):
            message = format_pool_message(pool_data)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–ª–∞: {pool_data['pubkey']}")
            await application.bot.send_message(
                chat_id=USER_ID,
                text=message,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—É–ª–∞ {pool_data['pubkey']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É–ª–∞: {e}")

async def update_filters_via_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_filters = json.loads(update.message.text)
        
        if not isinstance(new_filters, dict):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        for key, value in new_filters.items():
            if key in current_filters:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if key == "bin_steps" and isinstance(value, str):
                    value = [int(v.strip()) for v in value.split(',')]
                elif key == "verified_only" and isinstance(value, str):
                    value = value.lower() == "true"
                current_filters[key] = value
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞: {key}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        await save_filters(update, context)
        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_filters(update, context)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ JSON")
    
    except json.JSONDecodeError:
        example_filters = json.dumps(DEFAULT_FILTERS, indent=4)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.\n"
            f"–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON:\n```json\n{example_filters}\n```",
            parse_mode="Markdown"
        )
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

async def get_filters_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters_json = json.dumps(current_filters, indent=4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n```json\n{filters_json}\n```",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /getfiltersjson: {e}", exc_info=True)

def load_filters_from_github():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub.
    """
    global current_filters
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}

        # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=headers)
        if response.status_code == 404:
            logger.warning(f"–§–∞–π–ª {FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
            return
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = response.json()["content"]
        decoded_content = base64.b64decode(content).decode("utf-8")
        loaded_filters = json.loads(decoded_content)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        current_filters.update(loaded_filters)
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub ‚úÖ")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ GitHub: {e}")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ GitHub: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ GitHub: {e}", exc_info=True)

def save_filters_to_github():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        clean_filters = get_clean_filters()
        content = json.dumps(clean_filters, indent=4)
        encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        sha = ""
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                sha = response.json().get("sha", "")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SHA —Ñ–∞–π–ª–∞: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PUT-–∑–∞–ø—Ä–æ—Å–∞
        data = {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "content": encoded_content,
            "sha": sha  # SHA —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        }

        # –í—ã–ø–æ–ª–Ω—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å
        response = requests.put(url, headers=headers, json=data)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞

        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub ‚úÖ")
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ GitHub: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ GitHub: {e}", exc_info=True)

def filter_pool(pool: dict) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—É–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    """
    if current_filters.get("disable_filters", False):
        return True

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞
        decoded_data = decode_pool_data(base64.b64decode(pool["account"]["data"][0]))
        if not decoded_data:
            return False

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        conditions = [
            decoded_data["bin_step"] in current_filters["bin_steps"],
            decoded_data["base_fee"] <= current_filters["base_fee_max"],
            decoded_data["liquidity"] >= current_filters["min_tvl"],
            decoded_data["volume_1h"] >= current_filters["volume_1h_min"],
            decoded_data["volume_5m"] >= current_filters["volume_5m_min"],
            decoded_data["is_verified"] or not current_filters["verified_only"],
            decoded_data["listing_time"] >= current_filters["min_listing_time"],
            decoded_data["price_change_1h"] >= current_filters["price_change_1h_min"],
            decoded_data["price_change_5m"] >= current_filters["price_change_5m_min"],
            decoded_data["fee_change_1h"] >= current_filters["fee_change_1h_min"],
            decoded_data["fee_change_5m"] >= current_filters["fee_change_5m_min"],
        ]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        return all(conditions)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞: {e}", exc_info=True)
        return False

def get_non_sol_token(mint_x: str, mint_y: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Solana.
    –ï—Å–ª–∏ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ SOL, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω.
    """
    sol_mint = "So11111111111111111111111111111111111111112"
    if mint_x == sol_mint:
        return mint_y
    elif mint_y == sol_mint:
        return mint_x
    else:
        return mint_x  # –ï—Å–ª–∏ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ Solana, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π

def save_filters_to_file():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª.
    """
    try:
        with open(FILE_PATH, "w", encoding="utf-8") as file:
            json.dump(current_filters, file, indent=4, ensure_ascii=False)
        logger.info("–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–∞–π–ª: {e}", exc_info=True)

def load_filters_from_file():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞.
    """
    global current_filters
    try:
        if os.path.exists(FILE_PATH):
            with open(FILE_PATH, "r", encoding="utf-8") as file:
                loaded_filters = json.load(file)
                current_filters.update(loaded_filters)
                logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ ‚úÖ")
        else:
            logger.info("–§–∞–π–ª —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}", exc_info=True)

def get_clean_filters() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    return {
        "disable_filters": current_filters.get("disable_filters", False),
        "stable_coin": current_filters.get("stable_coin", "USDC"),
        "bin_steps": current_filters.get("bin_steps", [20, 80, 100, 125, 250]),
        "min_tvl": current_filters.get("min_tvl", 10000.0),
        "min_fdv": current_filters.get("min_fdv", 500000.0),
        "base_fee_max": current_filters.get("base_fee_max", 1.0),
        "fee_tvl_ratio_24h_min": current_filters.get("fee_tvl_ratio_24h_min", 0.1),
        "volume_1h_min": current_filters.get("volume_1h_min", 5000.0),
        "volume_5m_min": current_filters.get("volume_5m_min", 1000.0),
        "dynamic_fee_tvl_ratio_min": current_filters.get("dynamic_fee_tvl_ratio_min", 0.5),
        "verified_only": current_filters.get("verified_only", True),
        "min_listing_time": current_filters.get("min_listing_time", 7),
        "price_change_1h_min": current_filters.get("price_change_1h_min", 0.0),
        "price_change_5m_min": current_filters.get("price_change_5m_min", 0.0),
        "fee_change_1h_min": current_filters.get("fee_change_1h_min", 0.0),
        "fee_change_5m_min": current_filters.get("fee_change_5m_min", 0.0),
    }

def format_pool_message(pool: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.
    """
    try:
        address = pool.get("address", "N/A")
        mint_x = pool.get("mint_x", "?")
        mint_y = pool.get("mint_y", "?")
        tvl = float(pool.get("liquidity", 0)) / 1e9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º lamports –≤ SOL
        volume_1h = float(pool.get("volume_1h", 0)) / 1e9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º lamports –≤ SOL
        volume_5m = float(pool.get("volume_5m", 0)) / 1e9  # –ü–µ—Ä–µ–≤–æ–¥–∏–º lamports –≤ SOL
        bin_step = int(pool.get("bin_step", 0))
        base_fee = float(pool.get("base_fee", 0))
        price_change_1h = float(pool.get("price_change_1h", 0))
        price_change_5m = float(pool.get("price_change_5m", 0))
        fee_change_1h = float(pool.get("fee_change_1h", 0))
        fee_change_5m = float(pool.get("fee_change_5m", 0))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚≠êÔ∏è {mint_x[:4]}-{mint_y[:4]} (https://dexscreener.com/solana/{address})\n"
            f"‚òÑÔ∏è –ú–µ—Ç–µ–æ—Ä—ã (https://edge.meteora.ag/dlmm/{address})\n"
            f"üòº –ù–∞–±–æ—Ä—ã (https://trench.bot/bundles/{mint_x}?all=true)\n"
            f"üü¢ –¢–í–õ - {tvl:,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (1—á) - {volume_1h:,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (5–º) - {volume_5m:,.2f} SOL\n"
            f"‚öôÔ∏è –®–∞–≥ –∫–æ—Ä–∑–∏–Ω—ã - {bin_step}\n"
            f"üí∏ –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è - {base_fee:.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (1—á) - {price_change_1h:.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (5–º) - {price_change_5m:.2f}%\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (1—á) - {fee_change_1h:.2f}%\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (5–º) - {fee_change_5m:.2f}%"
        )
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞ {pool.get('address')}: {e}", exc_info=True)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ"

async def check_new_pools(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """
    global last_checked_pools
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–æ–≤...")

    try:
        if not context or not hasattr(context, 'bot'):
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–ª–æ–≤
        pools = await fetch_pools()
        if not pools:
            logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return

        new_pools = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–ª
        for pool in pools:
            if pool["address"] not in last_checked_pools:
                try:
                    if filter_pool(pool):
                        new_pools.append(pool)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞ {pool.get('address')}: {e}", exc_info=True)

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø—É–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if new_pools:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
            for pool in new_pools:
                try:
                    message = format_pool_message(pool)
                    if message:
                        await context.bot.send_message(
                            chat_id=USER_ID,
                            text=message,
                            parse_mode="Markdown",
                            disable_web_page_preview=True
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É–ª–µ {pool.get('address')}: {e}", exc_info=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—É–ª–æ–≤
            last_checked_pools.update(pool["address"] for pool in pools)
        else:
            logger.info("–ù–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–æ–≤: {e}", exc_info=True)
        await context.bot.send_message(
            chat_id=USER_ID,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–ª–æ–≤"
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))  # –ö–æ–º–∞–Ω–¥–∞ /start
application.add_handler(CommandHandler("filters", show_filters))  # –ö–æ–º–∞–Ω–¥–∞ /filters
application.add_handler(CommandHandler("setfilter", set_filter))  # –ö–æ–º–∞–Ω–¥–∞ /setfilter
application.add_handler(CommandHandler("checkpools", check_new_pools))  # –ö–æ–º–∞–Ω–¥–∞ /checkpools
application.add_handler(CommandHandler("getfiltersjson", get_filters_json))  # –ö–æ–º–∞–Ω–¥–∞ /getfiltersjson
application.add_handler(MessageHandler(filters=None, callback=update_filters_via_json))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-—Å–æ–æ–±—â–µ–Ω–∏–π

# –í–µ–±—Ö—É–∫
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.get_json()
        if not data:
            logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
            return '', 400

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}", exc_info=True)
        return '', 500

# Healthcheck
@app.route('/healthcheck')
def healthcheck():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        if application.running:
            return {"status": "OK"}, 200
        else:
            return {"status": "ERROR", "message": "–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"}, 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}", exc_info=True)
        return {"status": "ERROR", "message": str(e)}, 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
async def home():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    """
    return {
        "status": "OK",
        "version": "1.0.0",
        "description": "Telegram Bot –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É–ª–æ–≤ Meteora",
        "endpoints": {
            "healthcheck": "/healthcheck",
            "webhook": f"/{TELEGRAM_TOKEN}"
        }
    }, 200

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def save_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ GitHub.
    """
    try:
        save_filters_to_github()
        logger.info("–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")

async def load_filters(context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ GitHub.
    """
    global current_filters
    try:
        load_filters_from_github()
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}", exc_info=True)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        app.run(host='0.0.0.0', port=PORT)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)