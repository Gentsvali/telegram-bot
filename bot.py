import os
import logging
from datetime import datetime, timedelta
from quart import Quart, request
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import httpx
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Meteora
API_URL = "https://dlmm-api.meteora.ag/pair/all_with_pagination"
DEFAULT_FILTERS = {
    "min_tvl": 10000.0,
    "max_age": "3h",
    "min_volume_24h": 5000.0,
    "min_apr": 5.0,
    "verified_only": True
}
current_filters = DEFAULT_FILTERS.copy()
last_checked_pools = set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)
    .concurrent_updates(True)
    .http_version("1.1")
    .get_updates_http_version("1.1")
    .build()
)

app = Quart(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Quart
@app.before_serving
async def startup():
    await application.initialize()
    await application.start()
    await application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

@app.after_serving
async def shutdown():
    await application.stop()
    await application.shutdown()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    await update.message.reply_text(
        "üöÄ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ Meteora!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/filters - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n/setfilter [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]\n/checkpools - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–ª—ã"
    )

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    response = "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n" + "\n".join(
        f"{k}: {v}" for k, v in current_filters.items()
    )
    await update.message.reply_text(response)

async def set_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        return
    try:
        args = context.args
        if len(args) != 2:
            raise ValueError("–§–æ—Ä–º–∞—Ç: /setfilter [–ø–∞—Ä–∞–º–µ—Ç—Ä] [–∑–Ω–∞—á–µ–Ω–∏–µ]")
        
        param = args[0].lower()
        value = args[1]
        
        if param not in current_filters:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if param in ["min_tvl", "min_volume_24h", "min_apr"]:
            current_filters[param] = float(value)
        elif param == "max_age":
            parse_age(value)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            current_filters[param] = value
        elif param == "verified_only":
            current_filters[param] = value.lower() in ["true", "1", "yes"]
        
        await update.message.reply_text(f"‚úÖ {param} –æ–±–Ω–æ–≤–ª–µ–Ω: {current_filters[param]}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def parse_age(age_str: str) -> timedelta:
    units = {'d': 'days', 'h': 'hours', 'm': 'minutes'}
    unit = age_str[-1]
    value = int(age_str[:-1])
    return timedelta(**{units[unit]: value})

# –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å API
async def fetch_pools():
    try:
        params = {
            "sort_key": "volume",
            "order_by": "desc",
            "limit": 50,
            "page": 0,
            "hide_low_tvl": current_filters["min_tvl"],
            "include_unknown": not current_filters["verified_only"]
        }
        async with httpx.AsyncClient(
            timeout=30.0,
            limits=httpx.Limits(max_connections=100, max_keepalive_connections=20)
        ) as client:
            response = await client.get(API_URL, params=params)
            response.raise_for_status()
            data = response.json()
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç API: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return data.get("pairs", [])
    except Exception as e:
        logger.error(f"API Error: {str(e)}")
        return []

def filter_pool(pool: dict) -> bool:
    try:
        created_at = datetime.fromisoformat(pool['created_at'].replace("Z", "+00:00"))
        age = datetime.now(pytz.utc) - created_at
        result = all([
            float(pool.get('liquidity', 0)) >= current_filters['min_tvl'],
            float(pool.get('trade_volume_24h', 0)) >= current_filters['min_volume_24h'],
            float(pool.get('apr', 0)) >= current_filters['min_apr'],
            age <= parse_age(current_filters['max_age'])
        ])
        logger.info(f"–ü—É–ª {pool.get('address')} –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: {result}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        return result
    except Exception as e:
        logger.error(f"Filter Error: {str(e)}")
        return False

def format_pool_message(pool: dict, created_at: datetime) -> str:
    address = pool.get('address', '')
    mint_x = pool.get('mint_x', '?')
    mint_y = pool.get('mint_y', '?')
    liquidity = float(pool.get('liquidity', 0))
    volume_24h = float(pool.get('trade_volume_24h', 0))
    apr = float(pool.get('apr', 0))
    bin_step = pool.get('bin_step', '?')
    fees = pool.get('fees', {})

    message = (
        f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É–ª—ã —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é üî•\n\n"
        f"üî• {mint_x}-{mint_y} (https://t.me/meteora_pool_tracker_bot/?start=pool_info={address}) | "
        f"—Å–æ–∑–¥–∞–Ω ~{created_at.strftime('%d.%m.%Y %H:%M')} | "
        f"RugCheck: üü¢1 (https://rugcheck.xyz/tokens/{mint_x})\n"
        f"üîó Meteora (https://app.meteora.ag/dlmm/{address}) | "
        f"DexScreener (https://dexscreener.com/solana/{address}) | "
        f"GMGN (https://gmgn.ai/sol/token/{mint_x}) | "
        f"TrenchRadar (https://trench.bot/bundles/{mint_x}?all=true)\n"
        f"üíé Market Cap: ${liquidity / 1e6:.1f}M üîπTVL: ${liquidity / 1e3:.1f}K\n"
        f"üìä –û–±—ä–µ–º: ${volume_24h / 1e3:.1f}K üî∏ Bin Step: {bin_step} üíµ Fees: {fees.get('min_30', '?')}% | {fees.get('hour_1', '?')}%\n"
        f"ü§ë –ü—Ä–∏–Ω—Ç (5m dynamic fee/TVL): {(fees.get('min_30', 0) / liquidity * 100):.2f}%\n"
        f"ü™ô –¢–æ–∫–µ–Ω (https://t.me/meteora_pool_tracker_bot/?start=pools={mint_x}): {mint_x}\n"
        f"ü§ê Mute 1h (https://t.me/meteora_pool_tracker_bot/?start=mute_token={mint_x}_1h) | "
        f"Mute 24h (https://t.me/meteora_pool_tracker_bot/?start=mute_token={mint_x}_24h) | "
        f"Mute forever (https://t.me/meteora_pool_tracker_bot/?start=mute_token={mint_x}_forever)"
    )
    return message

async def check_new_pools(context: ContextTypes.DEFAULT_TYPE):
    global last_checked_pools
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤...")

    try:
        pools = await fetch_pools()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É–ª–æ–≤: {len(pools)}")

        current_ids = {p['address'] for p in pools}
        new_pools = [p for p in pools if p['address'] not in last_checked_pools and filter_pool(p)]

        if new_pools:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤: {len(new_pools)}")
            for pool in new_pools:
                created_at = datetime.fromisoformat(pool['created_at'].replace("Z", "+00:00"))
                moscow_time = created_at.astimezone(pytz.timezone('Europe/Moscow'))
                message = format_pool_message(pool, moscow_time)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

                await context.bot.send_message(
                    chat_id=USER_ID,
                    text=message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
            last_checked_pools = current_ids
        else:
            logger.info("–ù–æ–≤—ã—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"POOL CHECK ERROR: {str(e)}", exc_info=True)
        await context.bot.send_message(
            chat_id=USER_ID,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–ª–æ–≤"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
application.add_error_handler(lambda _, __: logger.error("Global error"))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("filters", show_filters))
application.add_handler(CommandHandler("setfilter", set_filter))
application.add_handler(CommandHandler("checkpools", check_new_pools))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
application.job_queue.run_repeating(check_new_pools, interval=300, first=10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –í–µ–±—Ö—É–∫
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫")
        data = await request.get_json()  # –î–æ–±–∞–≤–ª–µ–Ω await
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return '', 200
    except Exception as e:
        logger.error(f"CRITICAL ERROR: {str(e)}", exc_info=True)
        return '', 500

@app.route('/healthcheck', methods=['GET', 'POST'])
def healthcheck():
    return {
        "status": "OK",
        "bot_initialized": application.initialized,
        "last_update": datetime.utcnow().isoformat()
    }, 200

@app.route('/')
async def home():
    return "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Quart —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
    app.run(host='0.0.0.0', port=PORT)