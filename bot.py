import sqlite3

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("user_settings.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            min_tvl REAL DEFAULT 0,
            max_tvl REAL DEFAULT 1000000,
            min_fees REAL DEFAULT 0,
            max_fees REAL DEFAULT 100
        )
    """)
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id):
    conn = sqlite3.connect("user_settings.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_settings WHERE user_id = ?", (user_id,))
    settings = cursor.fetchone()
    conn.close()
    if settings:
        return {
            "min_tvl": settings[1],
            "max_tvl": settings[2],
            "min_fees": settings[3],
            "max_fees": settings[4],
        }
    return None

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_settings(user_id, min_tvl=None, max_tvl=None, min_fees=None, max_fees=None):
    conn = sqlite3.connect("user_settings.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO user_settings (user_id, min_tvl, max_tvl, min_fees, max_fees)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, min_tvl, max_tvl, min_fees, max_fees))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URLS = {
    "meteora_pools": "https://api.meteora.ag/v2/pools",
    "dexscreener": "https://api.dexscreener.com/latest/dex/pairs/solana/{address}",
}
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
CHAT_ID = os.getenv("CHAT_ID")  # ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN or not CHAT_ID:
    logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—É–ª–æ–≤
last_pools = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–∞—Ö –æ—Ç API Meteora
async def get_meteora_pools():
    try:
        response = requests.get(API_URLS["meteora_pools"])
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤ –æ—Ç Meteora: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª–µ –æ—Ç DexScreener
async def get_dexscreener_pool(address: str):
    try:
        url = API_URLS["dexscreener"].format(address=address)
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç DexScreener: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤
async def track_new_pools(user_id):
    global last_pools
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = get_user_settings(user_id)
    if not settings:
        settings = {
            "min_tvl": 0,
            "max_tvl": float("inf"),
            "min_fees": 0,
            "max_fees": float("inf"),
        }

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—É–ª—ã
    current_pools = await get_meteora_pools()
    if not current_pools:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç Meteora")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É–ª—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    filtered_pools = [
        pool for pool in current_pools
        if settings["min_tvl"] <= pool.get("tvl", 0) <= settings["max_tvl"]
        and settings["min_fees"] <= pool.get("fees", 0) <= settings["max_fees"]
    ]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –ø—É–ª—ã
    new_pools = [pool for pool in filtered_pools if pool not in last_pools]

    if new_pools:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        for pool in new_pools:
            message = (
                f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—É–ª—ã —Å –≤—ã—Å–æ–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é üî•\n\n"
                f"üî• {pool.get('pair')} (https://t.me/meteora_pool_tracker_bot/?start=pool_info={pool.get('address')}) | —Å–æ–∑–¥–∞–Ω ~{pool.get('age')} –Ω–∞–∑–∞–¥ | RugCheck: üü¢1 (https://rugcheck.xyz/tokens/{pool.get('token_address')})\n"
                f"üîó Meteora (https://app.meteora.ag/dlmm/{pool.get('address')}) | DexScreener (https://dexscreener.com/solana/{pool.get('address')}) | GMGN (https://gmgn.ai/sol/token/{pool.get('token_address')}) | TrenchRadar (https://trench.bot/bundles/{pool.get('token_address')}?all=true)\n"
                f"üíé Market Cap: ${pool.get('market_cap', 'N/A')} üîπTVL: ${pool.get('tvl', 'N/A')}\n"
                f"üìä –û–±—ä–µ–º: ${pool.get('volume', 'N/A')} üî∏ Bin Step: {pool.get('bin_step', 'N/A')} üíµ Fees: {pool.get('fees', 'N/A')} | {pool.get('dynamic_fee', 'N/A')}\n"
                f"ü§ë –ü—Ä–∏–Ω—Ç (5m dynamic fee/TVL): {pool.get('print_rate', 'N/A')}\n"
                f"ü™ô –¢–æ–∫–µ–Ω (https://t.me/meteora_pool_tracker_bot/?start=pools={pool.get('token_address')}): {pool.get('token_address')}\n"
                f"ü§ê Mute 1h (https://t.me/meteora_pool_tracker_bot/?start=mute_token={pool.get('token_address')}_1h) | Mute 24h (https://t.me/meteora_pool_tracker_bot/?start=mute_token={pool.get('token_address')}_24h) | Mute forever (https://t.me/meteora_pool_tracker_bot/?start=mute_token={pool.get('token_address')}_forever)"
            )
            await send_telegram_message(user_id, message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—É–ª–æ–≤
        last_pools = filtered_pools
    else:
        logger.info("–ù–æ–≤—ã—Ö –ø—É–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(user_id: int, message: str):
    try:
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        await application.bot.send_message(chat_id=user_id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Meteor!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–ª—ã"
async def check_pools(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –ø—É–ª—ã...")
    await track_new_pools(update.message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    keyboard = [
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL", callback_data="set_min_tvl")],
        [InlineKeyboardButton("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π TVL", callback_data="set_max_tvl")],
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ Fees", callback_data="set_min_fees")],
        [InlineKeyboardButton("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ Fees", callback_data="set_max_fees")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data.startswith("set_"):
        await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {data[4:]}:")
        context.user_data["awaiting_input"] = data
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if "awaiting_input" in context.user_data:
        setting = context.user_data["awaiting_input"]
        try:
            value = float(text)
            update_user_settings(user_id, **{setting: value})
            await update.message.reply_text(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value}")
            del context.user_data["awaiting_input"]
        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü–æ–º–æ—â—å"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n"
                                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
                                   "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–ª—ã"), check_pools))
    application.add_handler(MessageHandler(filters.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), settings))
    application.add_handler(MessageHandler(filters.Text("–ü–æ–º–æ—â—å"), help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")