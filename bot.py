import os
import aiohttp
import asyncio
import json

async def test_helius_connection():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Helius API"""
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("HELIUS_API_KEY")
    if not api_key:
        print("‚ùå HELIUS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑: export HELIUS_API_KEY='–≤–∞—à_–∫–ª—é—á'")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL
    helius_url = f"https://mainnet.helius-rpc.com/?api-key={api_key}"
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å DLMM)
    payload = {
        "jsonrpc": "2.0",
        "id": "connection-test",
        "method": "getVersion"
    }

    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Helius API...")
    print(f"URL: {helius_url.split('?')[0]}...")  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(helius_url, json=payload, timeout=10) as resp:
                data = await resp.json()
                
                if "result" in data:
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                    print(f"–í–µ—Ä—Å–∏—è RPC: {data['result']['solana-core']}")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                    print(json.dumps(data, indent=2))
                    return False
                    
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
        return False

async def test_dlmm_fetch():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è DLMM –ø—É–ª–æ–≤"""
    api_key = os.getenv("HELIUS_API_KEY")
    if not api_key:
        return

    helius_url = f"https://mainnet.helius-rpc.com/?api-key={api_key}"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è DLMM –ø—É–ª–æ–≤
    payload = {
        "jsonrpc": "2.0",
        "id": "dlmm-test",
        "method": "getAssetsByAuthority",
        "params": {
            "authorityAddress": "LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo",
            "page": 1,
            "limit": 3
        }
    }

    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å DLMM –ø—É–ª–æ–≤...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(helius_url, json=payload, timeout=15) as resp:
                data = await resp.json()
                
                if "result" in data:
                    pools = data["result"].get("items", [])
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {len(pools)}")
                    if pools:
                        print("–ü—Ä–∏–º–µ—Ä –ø—É–ª–∞:", json.dumps(pools[0]["id"], indent=2))
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—É–ª–æ–≤:")
                    print(json.dumps(data.get("error", {}), indent=2))
                    return False
                    
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
        return False

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("\n=== –¢–ï–°–¢ HELIUS API ===")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not await test_helius_connection():
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—É–ª–æ–≤
    await test_dlmm_fetch()

if __name__ == "__main__":
    asyncio.run(main())