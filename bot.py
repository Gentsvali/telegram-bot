import os
import logging
import asyncio
import aiohttp
import json
import signal
from datetime import datetime
from typing import Dict, Optional, List

from quart import Quart, request

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    filters
)

from solana.rpc.async_api import AsyncClient
from solders.pubkey import Pubkey
from solana.rpc.commitment import Confirmed
from solana.rpc.types import MemcmpOpts
import base58

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log")  # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ]
)

logger = logging.getLogger(__name__)

logging.getLogger("asyncio").setLevel(logging.WARNING)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID"))
HELIUS_RPC_URL = os.getenv("HELIUS_RPC_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_env_vars = ["TELEGRAM_TOKEN", "USER_ID", "HELIUS_RPC_URL"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    error_message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    logger.error(error_message)
    raise ValueError(error_message)

RPC_ENDPOINTS = [
    f"https://mainnet.helius-rpc.com/?api-key={os.getenv('HELIUS_API_KEY')}",
    f"https://api.helius-rpc.com/?api-key={os.getenv('HELIUS_API_KEY')}"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Solana –∫–ª–∏–µ–Ω—Ç–∞
solana_client = AsyncClient(RPC_ENDPOINTS[0], Confirmed)
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG_MODE = os.getenv("DEBUG_MODE", "false").lower() == "true"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
DEFAULT_FILTERS = {
    "bin_steps": [20, 80, 100, 125, 250],  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —à–∞–≥–∏ –∫–æ—Ä–∑–∏–Ω
    "min_tvl": 10.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL (–≤ SOL)
    "base_fee_max": 10.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è (–≤ %)
    "volume_1h_min": 10.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 1 —á–∞—Å (–≤ SOL)
    "volume_5m_min": 5.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç (–≤ SOL)
}

current_filters = DEFAULT_FILTERS.copy()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)
    .concurrent_updates(True)
    .build()
)

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FILE_PATH = "filters.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏

def validate_filters(filters: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
    
    Args:
        filters (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        required_fields = {
            "bin_steps": list,
            "min_tvl": (int, float),
            "base_fee_max": (int, float),
            "volume_1h_min": (int, float),
            "volume_5m_min": (int, float)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        if not all(field in filters for field in required_fields):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        for field, expected_type in required_fields.items():
            if not isinstance(filters[field], expected_type):
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è {field}")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if not all(isinstance(step, (int, float)) for step in filters["bin_steps"]):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç bin_steps")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        numeric_fields = ["min_tvl", "base_fee_max", "volume_1h_min", "volume_5m_min"]
        if not all(filters[field] >= 0 for field in numeric_fields):
            logger.error("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö")
            return False
            
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False

async def get_asset_info(asset_id: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–µ —á–µ—Ä–µ–∑ Helius DAS API"""
    try:
        url = f"{HELIUS_RPC_URL}?api-key={os.getenv('HELIUS_API_KEY')}"
        payload = {
            "jsonrpc": "2.0",
            "id": "my-id",
            "method": "getAsset",
            "params": {"id": asset_id}
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("result", {})
                logger.error(f"–û—à–∏–±–∫–∞ Helius API: {resp.status}")
                return None
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_asset_info: {e}")
        return None

async def load_filters():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global current_filters
    try:
        if os.path.exists(FILE_PATH):
            with open(FILE_PATH, 'r') as f:
                loaded = json.load(f)
                if validate_filters(loaded):
                    current_filters.update(loaded)
                    logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                    return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_filters = DEFAULT_FILTERS.copy()
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
    except Exception as e:
        current_filters = DEFAULT_FILTERS.copy()
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

async def init_solana() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana"""
    try:
        response = await solana_client.get_version()
        if response.value:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        logger.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ RPC")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {str(e)}")
        return False

async def get_pool_accounts():
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        filters = [
            {"dataSize": 200 }  # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö DLMM –ø—É–ª–∞
        ]

        response = await solana_client.get_program_accounts(
             METEORA_PROGRAM_ID,
             encoding="base64",
             commitment="confirmed",
             filters=filters
        )
        
        return response.value if response else None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return None

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É
        error = context.error
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "Rate limit exceeded" in str(error):
            message = "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        elif "Connection refused" in str(error):
            message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏. –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å..."
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await init_solana()
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É
            logger.error(f"–û—à–∏–±–∫–∞: {error}")
            message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = update.effective_chat.id if update and update.effective_chat else USER_ID
        await context.bot.send_message(
            chat_id=chat_id,
            text=message
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
application.add_error_handler(error_handler)

async def monitor_pools_v2():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–æ–≤"""
    global known_pools
    
    logger.info("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DLMM –ø—É–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    failure_count = 0
    
    while True:
        try:
            pools = await fetch_dlmm_pools_v3()
            
            if not pools:
                failure_count += 1
                if failure_count > 3:
                    logger.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    break
                await asyncio.sleep(60)
                continue
                
            failure_count = 0
            new_pools = [p for p in pools if p["id"] not in known_pools]
            
            if new_pools:
                logger.info(f"üÜï –ù–æ–≤—ã–µ –ø—É–ª—ã: {len(new_pools)}")
                for pool in new_pools:
                    try:
                        pool_data = await parse_pool_data(pool)
                        if pool_data and filter_pool(pool_data):
                            known_pools.add(pool["id"])
                            await send_pool_notification(pool_data)
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–ª–∞: {str(e)}")
            
            await asyncio.sleep(300)
            
        except asyncio.CancelledError:
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            break
        except Exception as e:
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
            await asyncio.sleep(60)

async def fetch_dlmm_pools_v3():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Helius DAS API"""
    try:
        logger.info("üîç –ó–∞–ø—Ä–æ—Å DLMM –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ getAssetsByGroup...")
        
        payload = {
            "jsonrpc": "2.0",
            "id": "dlmm-v3",
            "method": "getAssetsByGroup",
            "params": {
                "groupKey": "collection",
                "groupValue": "DLMM Pool",
                "page": 1,
                "limit": 500,
                "displayOptions": {
                    "showCollectionMetadata": True,
                    "showUnverifiedCollections": True
                }
            }
        }

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {os.getenv('HELIUS_API_KEY')}"
        }

        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.post(
                HELIUS_RPC_URL,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=20)
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if data.get("result"):
                        pools = data["result"].get("items", [])
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pools)} –ø—É–ª–æ–≤")
                        return pools
                    logger.error(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data}")
                else:
                    logger.error(f"HTTP {resp.status}: {await resp.text()}")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ fetch_dlmm_pools_v3: {str(e)}")
        return []

async def sort_pool_accounts(accounts):
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É–ª–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        HEADER_SIZE = 4  # –†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
        sorted_accounts = []
        
        for acc in accounts:
            try:
                data = base64.b64decode(acc.account.data)
                length = int.from_bytes(data[0:4], "little")
                
                if len(data) < HEADER_SIZE + length:
                    logger.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞")
                    continue
                    
                account_data = data[HEADER_SIZE:HEADER_SIZE + length]
                sorted_accounts.append((account_data, acc))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                continue
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞–Ω–Ω—ã–º
        sorted_accounts.sort(key=lambda x: x[0])
        return [acc[1] for acc in sorted_accounts]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
        return accounts

async def parse_pool_data(pool: dict) -> Optional[dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—É–ª–∞ —Å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç Helius"""
    if not isinstance(pool, dict):
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞: –æ–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å")
        return None
        
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Solana RPC
        pool_id = pool.get("id")
        if not pool_id:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Helius
        asset_info = await get_asset_info(pool_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = pool.get("content", {}).get("metadata", {})
        if asset_info:
            metadata.update(asset_info.get("content", {}).get("metadata", {}))
            
        return {
            "id": pool_id,
            "name": metadata.get("name"),
            "symbol": metadata.get("symbol"),
            "tvl": float(metadata.get("tvl", 0)),
            "fee_rate": float(metadata.get("fee_rate", 0)),
            "volume_24h": float(metadata.get("volume_24h", 0)),
            "mint_x": next((a["mint"] for a in pool.get("token_accounts", []) if a.get("type") == "token_x"), ""),
            "mint_y": next((a["mint"] for a in pool.get("token_accounts", []) if a.get("type") == "token_y"), ""),
            "asset_info": asset_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Helius
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É–ª–∞: {e}")
        return None

async def send_pool_notification(pool: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—É–ª–µ"""
    try:
        message = (
            f"üöÄ *–ù–æ–≤—ã–π DLMM Pool*: {pool['name']} ({pool['symbol']})\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: `{pool['id']}`\n"
            f"‚Ä¢ TVL: {pool['tvl']:.2f} SOL\n"
            f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {pool['fee_rate']:.2f}%\n"
            f"‚Ä¢ –û–±—ä–µ–º (24—á): {pool['volume_24h']:.2f} SOL\n"
            f"‚Ä¢ [Meteora](https://app.meteora.ag/pool/{pool['id']}) | "
            f"[DexScreener](https://dexscreener.com/solana/{pool['id']})"
        )
        
        await application.bot.send_message(
            chat_id=USER_ID,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def filter_pool(pool: dict) -> bool:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    try:
        return all([
            pool["tvl"] >= current_filters["min_tvl"],
            pool["fee_rate"] <= current_filters["base_fee_max"],
            pool["volume_24h"] >= current_filters["volume_1h_min"] / 24  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 1—á -> 24—á
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Quart(__name__)

@app.before_serving
async def startup_sequence():
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
        logger.info("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana...")
        if not await init_solana():
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Solana")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Helius API
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Helius API...")
        test_pools = await fetch_dlmm_pools_v3()
        if not test_pools:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—É–ª—ã")
        else:
            logger.info(f"‚úÖ –¢–µ—Å—Ç API —É—Å–ø–µ—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(test_pools)} –ø—É–ª–æ–≤")

        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        await load_filters()
        
        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        await application.initialize()
        await application.start()
        
        # 5. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–æ–≤...")
        asyncio.create_task(monitor_pools_v2())
        
        return True
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        return False

@app.after_serving
async def shutdown_handler():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    try:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # 1. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        tasks = [t for t in asyncio.all_tasks() 
                if t is not asyncio.current_task()]
                
        # 2. –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if tasks:
            await asyncio.wait(tasks, timeout=5.0)
            
        # 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in tasks:
            if not task.done():
                task.cancel()
                
        # 4. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if application.running:
            await application.stop()
            await application.shutdown()
            
        # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Solana
        await solana_client.close()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")

async def shutdown_signal(signal, loop):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal.name}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await solana_client.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        if application.running:
            await application.stop()
            await application.shutdown()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop
        if not loop.is_closed():
            loop.stop()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ loop –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not loop.is_closed():
            loop.stop()

def handle_shutdown(signum, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
        loop = asyncio.get_event_loop()
        
        if loop.is_running():
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            shutdown_task = loop.create_task(shutdown_handler())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                loop.run_until_complete(
                    asyncio.wait_for(shutdown_task, timeout=10.0)
                )
            except asyncio.TimeoutError:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            finally:
                # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for task in asyncio.all_tasks(loop):
                    task.cancel()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º loop –µ—â–µ —Ä–∞–∑ —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–º–µ–Ω—É
                loop.run_until_complete(loop.shutdown_asyncgens())
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop
                loop.stop()
                loop.close()
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        sys.exit(1)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Python –∫–æ–¥
signal.signal(signal.SIGINT, handle_shutdown)
signal.signal(signal.SIGTERM, handle_shutdown)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        welcome_message = (
            "üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DLMM –ø—É–ª–æ–≤ Meteora\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/filters - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n" 
            "/setfilter - –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "/checkpools - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–ª—ã —Å–µ–π—á–∞—Å\n"
        )
        
        await update.message.reply_text(welcome_message)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    if update.effective_user.id != USER_ID:
        return

    try:
        response = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"‚Ä¢ Bin Steps: {', '.join(map(str, current_filters['bin_steps']))}\n"
            f"‚Ä¢ –ú–∏–Ω TVL: {current_filters['min_tvl']:,.2f} SOL\n"
            f"‚Ä¢ –ú–∞–∫—Å –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è: {current_filters['base_fee_max']}%\n"
            f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (1—á): {current_filters['volume_1h_min']:,.2f} SOL\n"
            f"‚Ä¢ –ú–∏–Ω –æ–±—ä–µ–º (5–º): {current_filters['volume_5m_min']:,.2f} SOL"
        )
        await update.message.reply_text(response)
        
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        logger.error(f"–û—à–∏–±–∫–∞ show_filters: {e}")

async def set_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    if update.effective_user.id != USER_ID:
        return

    try:
        if len(context.args) < 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setfilter <–ø–∞—Ä–∞–º–µ—Ç—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n"
                "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                "‚Ä¢ bin_steps - —Å–ø–∏—Å–æ–∫ (–ø—Ä–∏–º–µ—Ä: 20,80,100)\n"
                "‚Ä¢ min_tvl - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL –≤ SOL\n"
                "‚Ä¢ base_fee_max - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ %\n"
                "‚Ä¢ volume_1h_min - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 1—á –≤ SOL\n"
                "‚Ä¢ volume_5m_min - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∑–∞ 5–º –≤ SOL"
            )
            return

        param = context.args[0].lower()
        value = context.args[1]

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        valid_params = {
            "bin_steps": lambda x: [int(v) for v in x.split(',')],
            "min_tvl": float,
            "base_fee_max": float,
            "volume_1h_min": float,
            "volume_5m_min": float
        }

        if param not in valid_params:
            await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}")
            return

        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            converted_value = valid_params[param](value)
            current_filters[param] = converted_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with open(FILE_PATH, "w") as f:
                json.dump(current_filters, f, indent=4)
                
            await update.message.reply_text(f"‚úÖ {param} –æ–±–Ω–æ–≤–ª–µ–Ω: {converted_value}")
            
        except (ValueError, TypeError) as e:
            await update.message.reply_text(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ set_filter: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞")

async def poll_program_accounts():
    """
    –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    try:
        while True:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è getProgramAccounts
                filters = [
                    {
                        "dataSize": 752  # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö DLMM –ø—É–ª–∞
                    }
                ]
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                accounts = await solana_client.get_program_accounts(
                    pubkey=METEORA_PROGRAM_ID,
                    filters=filters,
                    encoding="base64",
                    commitment="confirmed"
                )

                if accounts:
                    for acc in accounts:
                        pool_data = decode_pool_data(acc.account.data)
                        if pool_data and filter_pool(pool_data):
                            message = format_pool_message(pool_data)
                            if message:
                                await application.bot.send_message(
                                    chat_id=USER_ID,
                                    text=message,
                                    parse_mode="Markdown",
                                    disable_web_page_preview=True
                                )
                            
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ poll_program_accounts: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    except asyncio.CancelledError:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def get_pool_data_from_log(log: str) -> Optional[dict]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –∏–∑ –ª–æ–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º commitment level "confirmed" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        commitment = "confirmed" 

        # –ò—â–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞ –≤ –ª–æ–≥–µ
        pool_address = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞
        if pool_address:
            try:
                account_info = await solana_client.get_account_info(
                    pubkey=pool_address,
                    commitment=commitment,
                    encoding="base64"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ [(1)](https://solana.com/developers/guides/javascript/get-program-accounts)
                )
                
                if account_info and account_info.value:
                    return decode_pool_data(account_info.value.data)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
                return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞: {e}")
        return None

def decode_pool_data(data: bytes) -> dict:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATA_OFFSET –∏ DATA_LENGTH –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ [(2)](https://solana.com/developers/courses/native-onchain-development/paging-ordering-filtering-data-frontend)
        DATA_OFFSET = 2  # Skip versioning bytes
        DATA_LENGTH = 18  # Length for comparison

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ [(2)](https://solana.com/developers/courses/native-onchain-development/paging-ordering-filtering-data-frontend)
        return {
            "mint_x": base58.b58encode(data[:32]).decode(),  
            "mint_y": base58.b58encode(data[32:64]).decode(),
            "liquidity": int.from_bytes(data[64:72], "little"),
            "bin_step": int.from_bytes(data[88:90], "little"),
            "base_fee": int.from_bytes(data[90:92], "little") / 10000,
            "tvl_sol": int.from_bytes(data[64:72], "little") / 1e9
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def handle_pool_change(pool_data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º onAccountChange
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = [
            'address', 'mint_x', 'mint_y', 'liquidity',
            'volume_1h', 'volume_5m', 'bin_step', 'base_fee'
        ]
        
        if not all(field in pool_data for field in required_fields):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
        if not filter_pool(pool_data):
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_pool_message(pool_data)
        if not message:
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await application.bot.send_message(
            chat_id=USER_ID,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É–ª–∞: {e}")

async def save_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filters_to_save = {
            "bin_steps": current_filters["bin_steps"],
            "min_tvl": current_filters["min_tvl"],
            "base_fee_max": current_filters["base_fee_max"],
            "volume_1h_min": current_filters["volume_1h_min"],
            "volume_5m_min": current_filters["volume_5m_min"]
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(FILE_PATH, "w") as f:
            json.dump(filters_to_save, f, indent=4)

        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        logger.info("–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")

async def update_filters_via_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    if update.effective_user.id != USER_ID:
        return

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        text = update.message.text
        if text.startswith('/'):
            text = ' '.join(text.split()[1:])
        
        # –ü–∞—Ä—Å–∏–º JSON
        new_filters = json.loads(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = {
            "bin_steps": list,
            "min_tvl": (int, float),
            "base_fee_max": (int, float),
            "volume_1h_min": (int, float),
            "volume_5m_min": (int, float)
        }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        for field, expected_type in required_fields.items():
            if field not in new_filters:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            if not isinstance(new_filters[field], expected_type):
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {field}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        current_filters.update(new_filters)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(FILE_PATH, "w") as f:
            json.dump(current_filters, f, indent=4)

        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç")
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

async def get_filters_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    """
    if update.effective_user.id != USER_ID:
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filters_json = {
            "bin_steps": current_filters["bin_steps"],
            "min_tvl": current_filters["min_tvl"],
            "base_fee_max": current_filters["base_fee_max"],
            "volume_1h_min": current_filters["volume_1h_min"],
            "volume_5m_min": current_filters["volume_5m_min"]
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON
        formatted_json = json.dumps(filters_json, indent=4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n```json\n{formatted_json}\n```",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è JSON —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

def filter_pool(pool: dict) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DLMM –ø—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        conditions = [
            pool.get("bin_step") in current_filters["bin_steps"],
            pool.get("base_fee", 0) <= current_filters["base_fee_max"],
            pool.get("tvl_sol", 0) >= current_filters["min_tvl"],
            pool.get("volume_1h", 0) >= current_filters["volume_1h_min"],
            pool.get("volume_5m", 0) >= current_filters["volume_5m_min"]
        ]

        return all(conditions)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞: {e}")
        return False

def get_non_sol_token(mint_x: str, mint_y: str) -> str:
    """
    Returns the non-SOL token from a token pair.
    
    Args:
        mint_x (str): First token mint address
        mint_y (str): Second token mint address
    
    Returns:
        str: Address of non-SOL token
    """
    # Using proper Solana token addresses
    SOL_MINT = "So11111111111111111111111111111111111111112"
    
    try:
        if mint_x == SOL_MINT:
            return mint_y
        elif mint_y == SOL_MINT:
            return mint_x
        else:
            return mint_x
            
    except Exception as e:
        logger.error(f"Error determining non-SOL token: {e}")
        return mint_x

def save_filters_to_file():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directory = os.path.dirname(FILE_PATH)
        if directory and not os.path.exists(directory):
            os.makedirs(directory)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º    
        if not validate_filters(current_filters):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        clean_filters = get_clean_filters()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with open(FILE_PATH, "w", encoding="utf-8") as file:
            json.dump(clean_filters, file, indent=4, ensure_ascii=False)
            
        logger.info(f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {FILE_PATH} ‚úÖ")
        return True
        
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return False
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def load_filters_from_file():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
    """
    global current_filters
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(FILE_PATH):
            logger.info(f"–§–∞–π–ª —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {FILE_PATH}")
            return False
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã    
        with open(FILE_PATH, "r", encoding="utf-8") as file:
            loaded_filters = json.load(file)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not validate_filters(loaded_filters):
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            return False
                
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è
        for key, value in loaded_filters.items():
            if key in DEFAULT_FILTERS:
                if isinstance(value, type(DEFAULT_FILTERS[key])):
                    current_filters[key] = value
                else:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª–µ {key}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                        
        logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")
        return True
            
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        return False
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def get_clean_filters() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∑–Ω–∞—á–µ–Ω–∏–π
    LIMITS = {
        "min_tvl": (0.0, 1000000.0),
        "base_fee_max": (0.0, 100.0),
        "volume_1h_min": (0.0, 1000000.0),
        "volume_5m_min": (0.0, 1000000.0)
    }

    clean_filters = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º bin_steps
    bin_steps = current_filters.get("bin_steps", [20, 80, 100, 125, 250])
    if isinstance(bin_steps, list):
        clean_filters["bin_steps"] = [
            step for step in bin_steps 
            if isinstance(step, (int, float)) and 1 <= step <= 1000
        ]
    else:
        clean_filters["bin_steps"] = [20, 80, 100, 125, 250]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for key, (min_val, max_val) in LIMITS.items():
        value = current_filters.get(key, DEFAULT_FILTERS.get(key, 0.0))
        try:
            value = float(value)
            clean_filters[key] = max(min_val, min(value, max_val))
        except (TypeError, ValueError):
            clean_filters[key] = DEFAULT_FILTERS.get(key, 0.0)
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    return clean_filters

def format_pool_message(pool: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç Helius"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name = pool.get("name", "Unknown")
        symbol = pool.get("symbol", "?")
        pool_id = pool.get("id", "")
        tvl = pool.get("tvl", 0)
        fee_rate = pool.get("fee_rate", 0)
        volume_24h = pool.get("volume_24h", 0)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Helius
        asset_info = pool.get("asset_info", {})
        creator = asset_info.get("authorities", [{}])[0].get("address", "") if asset_info else ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üöÄ *–ù–æ–≤—ã–π DLMM Pool*: {name} ({symbol})\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: `{pool_id}`\n"
            f"‚Ä¢ –°–æ–∑–¥–∞—Ç–µ–ª—å: `{creator}`\n"
            f"‚Ä¢ TVL: {tvl:.2f} SOL\n"
            f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: {fee_rate:.2f}%\n"
            f"‚Ä¢ –û–±—ä–µ–º (24—á): {volume_24h:.2f} SOL\n"
            f"‚Ä¢ [Meteora](https://app.meteora.ag/pool/{pool_id}) | "
            f"[DexScreener](https://dexscreener.com/solana/{pool_id})"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ explorer –µ—Å–ª–∏ –µ—Å—Ç—å creator
        if creator:
            message += f" | [Explorer](https://solscan.io/account/{creator})"
            
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def setup_command_handlers(application: ApplicationBuilder):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞.
    """
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(
            CommandHandler(
                "start", 
                start,
                filters=filters.User(user_id=USER_ID)
            )
        )

        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filter_handlers = [
            CommandHandler(
                "filters", 
                show_filters,
                filters=filters.User(user_id=USER_ID)
            ),
            CommandHandler(
                "setfilter", 
                set_filter,
                filters=filters.User(user_id=USER_ID)
            ),
            CommandHandler(
                "getfiltersjson", 
                get_filters_json,
                filters=filters.User(user_id=USER_ID)
            )
        ]
        
        for handler in filter_handlers:
            application.add_handler(handler)

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    if update.effective_user.id != USER_ID:
        return

    await update.message.reply_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/filters - —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/setfilter - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "/getfiltersjson - —Ñ–∏–ª—å—Ç—Ä—ã –≤ JSON\n"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
setup_command_handlers(application)

class WebhookConfig:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤
    """
    WEBHOOK_TIMEOUT = 10  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    MAX_RETRIES = 2      # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    RETRY_DELAY = 0.5    # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if not request.is_json:
            logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ JSON –∑–∞–ø—Ä–æ—Å")
            return {'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è application/json'}, 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = await request.get_json()
        if not data:
            logger.error("–ü—É—Å—Ç–æ–π JSON")
            return {'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}, 400

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(WebhookConfig.MAX_RETRIES):
            try:
                update = Update.de_json(data, application.bot)
                await asyncio.wait_for(
                    application.process_update(update),
                    timeout=WebhookConfig.WEBHOOK_TIMEOUT
                )
                return '', 200
            except asyncio.TimeoutError:
                if attempt == WebhookConfig.MAX_RETRIES - 1:
                    raise
                await asyncio.sleep(WebhookConfig.RETRY_DELAY)

    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –≤–µ–±—Ö—É–∫–∞")
        return {'error': '–¢–∞–π–º–∞—É—Ç'}, 504
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞'}, 500

@app.route('/healthcheck')
async def healthcheck():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.
    """
    try:
        status = {
            "status": "error",
            "components": {
                "bot": False,
                "solana": False
            },
            "timestamp": datetime.utcnow().isoformat()
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
        if application.running:
            status["components"]["bot"] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana
        try:
            response = await solana_client.get_version()
            if response.value:
                status["components"]["solana"] = True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Solana: {e}")

        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if all(status["components"].values()):
            status["status"] = "ok"
            return status, 200
            
        return status, 503

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }, 500

@app.route('/test-solana')
async def test_solana():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana.
    """
    try:
        connected = await solana_client.get_version()
        return {"solana_connected": bool(connected.value)}, 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Solana: {e}")
        return {"solana_connected": False}, 500

@app.route('/')
async def home():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    try:
        return {
            "status": "ok",
            "name": "Meteora Monitor",
            "description": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–æ–≤ Meteora –Ω–∞ Solana",
            "endpoints": {
                "/healthcheck": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                "/test-solana": "–ü—Ä–æ–≤–µ—Ä–∫–∞ Solana"
            },
            "timestamp": datetime.utcnow().isoformat()
        }, 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        return {"status": "error"}, 500

if __name__ == "__main__":
     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    assert 'fetch_dlmm_pools_v3' in globals(), "–§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    assert 'monitor_pools_v2' in globals(), "–§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if asyncio.run(startup_sequence()):
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–æ–≤
            app.run(
                host="0.0.0.0",
                port=10000,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
                debug=False
            )
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)