from dotenv import load_dotenv
import os
import logging
import sqlite3
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TOKEN = os.getenv("TELEGRAM_TOKEN")
SECRET_TOKEN = os.getenv("SECRET_TOKEN") 
WEBHOOK_BASE = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8080))

if not all([TOKEN, SECRET_TOKEN, WEBHOOK_BASE]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = f"{WEBHOOK_BASE}/{TOKEN}"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
API_URLS = {
    "meteora_pools": "https://api.meteora.ag/v2/pools",  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π URL
    "dexscreener": "https://api.dexscreener.com/latest/dex/pairs/solana/{address}"
}

class Database:
    def __init__(self):
        self.conn = sqlite3.connect("bot_filters.db", check_same_thread=False)
        self._init_db()
        
    def _init_db(self):
        try:
            with self.conn:
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_filters (
                        user_id INTEGER PRIMARY KEY,
                        min_tvl REAL DEFAULT 0,
                        max_bin_step INTEGER DEFAULT 100,
                        token_type TEXT DEFAULT 'ALL'  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ ALL
                    )
                """)
                logger.info("–¢–∞–±–ª–∏—Ü–∞ user_filters —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def get_user_filters(self, user_id):
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT * FROM user_filters WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            return {
                "min_tvl": result[1] if result else 0,
                "max_bin_step": result[2] if result else 100,
                "token_type": result[3] if result else 'ALL',
            } if result else {}
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return {}

    def update_user_filters(self, user_id, filters):
        try:
            with self.conn:
                self.conn.execute("""
                    INSERT OR REPLACE INTO user_filters 
                    (user_id, min_tvl, max_bin_step, token_type)
                    VALUES (?, ?, ?, ?)
                """, (
                    user_id, 
                    filters.get("min_tvl", 0),
                    filters.get("max_bin_step", 100),
                    filters.get("token_type", "ALL")
                ))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def get_filter_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL", callback_data="set_min_tvl")],
        [InlineKeyboardButton("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Bin Step", callback_data="set_max_bin_step")],
        [InlineKeyboardButton("–¢–∏–ø —Ç–æ–∫–µ–Ω–∞", callback_data="set_token_type")],
        [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="save_filters")],
    ])

async def start(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if not db.get_user_filters(user_id):
            db.update_user_filters(user_id, {})
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ Meteora.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")

async def filters_command(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /filters –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        filters = db.get_user_filters(user_id)
        
        text = (
            f"–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL: {filters['min_tvl']}\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Bin Step: {filters['max_bin_step']}\n"
            f"‚Ä¢ –¢–∏–ø —Ç–æ–∫–µ–Ω–∞: {filters['token_type']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        await update.message.reply_text(text, reply_markup=get_filter_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /filters: {e}")

async def button_handler(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        await query.answer()
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data}")
        
        if query.data == "save_filters":
            await query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            return
            
        context.user_data["awaiting_input"] = query.data
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

async def save_filter_value(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id
        text = update.message.text.strip()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {user_id}: {text}")
        
        current_filters = db.get_user_filters(user_id)
        
        converters = {
            "set_min_tvl": ("min_tvl", float),
            "set_max_bin_step": ("max_bin_step", int),
            "set_token_type": ("token_type", str.upper)
        }
        
        key, converter = converters.get(context.user_data.get("awaiting_input"), (None, None))
        
        if key and converter:
            try:
                converted_value = converter(text)
                current_filters[key] = converted_value
                db.update_user_filters(user_id, current_filters)
                await update.message.reply_text("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=get_filter_keyboard())
                logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {key} = {converted_value}")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

async def fetch_pools():
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            response = await client.get(
                API_URLS["meteora_pools"],
                headers={"User-Agent": "Mozilla/5.0"}
            )
            
            if response.status_code != 200:
                logger.error(f"API Error: {response.status_code} - {response.text[:200]}")
                return []

            data = response.json()
            logger.debug(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
            
            if not isinstance(data, list):
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API")
                return []

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—É–ª–æ–≤")
            return [pool for pool in data if validate_pool(pool)]  # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤: {str(e)}")
        return []

def validate_pool(pool: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞"""
    required_fields = {'address', 'tvl', 'bin_step', 'token_type'}
    return all(field in pool for field in required_fields)

async def format_pool_message(pool):
    try:
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ {pool['address']}")
        address = pool.get("address", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        dex_data = await get_dexscreener_data(address)
        
        message = (
            f"üîπ {pool.get('base_token', {}).get('symbol', 'N/A')}\n"
            f"‚Ä¢ TVL: {pool.get('tvl', 'N/A')}$\n"
            f"‚Ä¢ Bin Step: {pool.get('bin_step', 'N/A')}\n"
            f"‚Ä¢ –¢–∏–ø: {pool.get('token_type', 'N/A')}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {address[:15]}...\n"
            f"üìä DexScreener: {dex_data.get('url', '#')}"
        )
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

async def get_dexscreener_data(address: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get(
                API_URLS["dexscreener"].format(address=address)
            )
            return response.json().get('pair', {})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ DexScreener: {e}")
        return {}

async def track_new_pools(context: CallbackContext):
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
    try:
        all_pools = await fetch_pools()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_pools)} –ø—É–ª–æ–≤ –æ—Ç API")
        
        if not all_pools:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        cursor = db.conn.cursor()
        cursor.execute("SELECT user_id FROM user_filters")
        users = [row[0] for row in cursor.fetchall()]
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        for user_id in users:
            filters = db.get_user_filters(user_id)
            logger.info(f"–§–∏–ª—å—Ç—Ä—ã –¥–ª—è {user_id}: {filters}")
            
            filtered = [
                pool for pool in all_pools
                if pool.get("tvl", 0) >= filters["min_tvl"]
                and pool.get("bin_step", 100) <= filters["max_bin_step"]
                and str(pool.get("token_type", "")).upper() == filters["token_type"]
            ]
            logger.info(f"–î–ª—è {user_id} –Ω–∞–π–¥–µ–Ω–æ {len(filtered)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤")
            
            for pool in filtered[:5]:
                message = await format_pool_message(pool)
                if message:
                    try:
                        await context.bot.send_message(
                            user_id,
                            message,
                            disable_web_page_preview=True
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                else:
                    logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–ª–∞")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ track_new_pools: {e}")

async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ—Ç–ª–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not hasattr(db, 'conn'):
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        YOUR_USER_ID = 839443665
        db.update_user_filters(YOUR_USER_ID, {
            "min_tvl": 0,
            "max_bin_step": 100,
            "token_type": "ALL"
        })
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {YOUR_USER_ID} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("filters", filters_command),
            CallbackQueryHandler(button_handler),
            MessageHandler(filters.TEXT & ~filters.COMMAND, save_filter_value)
        ]
        
        for handler in handlers:
            application.add_handler(handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        application.job_queue.run_repeating(
            track_new_pools,
            interval=300.0,
            first=10.0
        )
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
            secret_token=SECRET_TOKEN,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()