import os
import logging
import asyncio
import aiohttp
import signal
from quart import Quart, request, jsonify
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)
from solders.pubkey import Pubkey

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
HELIUS_API_KEY = os.getenv("HELIUS_API_KEY")  # –í–∞—à –∫–ª—é—á Helius
USER_ID = int(os.getenv("USER_ID"))           # –í–∞—à Telegram ID
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_URL")   # URL –≤–µ–±—Ö—É–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Railway)

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ DLMM Meteora (–ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å)
PROGRAM_ID = Pubkey.from_string("LBUZKhRxPF3XUpBCjp4YzTKgLccjZhTSDM9YuVaPwxo")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (—á—Ç–æ–±—ã –Ω–µ —Å–≤–µ—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiohttp").setLevel(logging.WARNING)

app = Quart(__name__)
app.bot_app = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ startup
known_pools = set()

shutdown_event = asyncio.Event()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
def signal_handler():
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    shutdown_event.set()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def fetch_first_50_pools():
    try:
        url = f"https://mainnet.helius-rpc.com/?api-key={HELIUS_API_KEY}"
        payload = {
            "jsonrpc": "2.0",
            "id": "dlmm-fetcher",
            "method": "getProgramAccounts",
            "params": [
                str(PROGRAM_ID),
                {
                    "encoding": "jsonParsed",
                    "commitment": "confirmed",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
                    "dataSlice": {
                        "offset": 0,
                        "length": 100
                    },
                    "withContext": True,
                    "limit": 50
                }
            ]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    if "error" in data:
                        logger.error(f"Helius API error: {data['error']}")
                        return []
                    
                    accounts = data.get("result", {}).get("value", [])
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    for account in accounts:
                        print(f"Account pubkey: {account['pubkey']}")
                        print(f"Data size: {account['account'].get('space', 'size not available')}")
                        print("---")
                    
                    return accounts
                logger.error(f"–û—à–∏–±–∫–∞ Helius API: {resp.status}")
                return []
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—É–ª–æ–≤: {e}", exc_info=True)
        return []

async def monitor_pools():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DLMM –ø—É–ª–æ–≤...")
    while not shutdown_event.is_set():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            pools = await fetch_first_50_pools()
            if shutdown_event.is_set():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                break
            
            if not pools:
                logger.info("–ù–æ–≤—ã—Ö –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await asyncio.sleep(60)
                continue
                
            new_pools = [p["pubkey"] for p in pools if p["pubkey"] not in known_pools]
            
            if not new_pools:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ")
                await asyncio.sleep(60)
                continue
                
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_pools)} –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤")
            for pool_id in new_pools:
                known_pools.add(pool_id)
                await send_notification(pool_id)
            
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
            await asyncio.sleep(30)

async def send_notification(pool_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—É–ª–µ –≤ Telegram"""
    try:
        message = (
            "üÜï **–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π DLMM –ø—É–ª!**\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: `{pool_id}`\n"
            f"‚Ä¢ [–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Solscan](https://solscan.io/account/{pool_id})\n"
            f"‚Ä¢ [–û—Ç–∫—Ä—ã—Ç—å –≤ Meteora](https://app.meteora.ag/pool/{pool_id})"
        )
        await app.bot_app.bot.send_message(
            chat_id=USER_ID,
            text=message,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# --- Telegram –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DLMM –ø—É–ª–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(known_pools)} –ø—É–ª–æ–≤")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
@app.before_serving
async def startup():
    app.bot_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    await app.bot_app.initialize()
    
    app.bot_app.add_handler(CommandHandler("start", start))
    app.bot_app.add_handler(CommandHandler("status", status))
    
    webhook_url = f"{WEBHOOK_BASE_URL}/webhook"
    await app.bot_app.bot.set_webhook(webhook_url)
    logger.info(f"üåç –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    
    asyncio.create_task(monitor_pools())
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã")

@app.after_serving
async def shutdown():
    if app.bot_app:
        await app.bot_app.bot.delete_webhook()
        await app.bot_app.shutdown()
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
@app.route('/webhook', methods=['POST'])
async def webhook():
    if not app.bot_app:
        return jsonify({"status": "error", "reason": "Bot not initialized"}), 500
    
    data = await request.get_json()
    update = Update.de_json(data, app.bot_app.bot)
    await app.bot_app.process_update(update)
    return jsonify({"status": "ok"})

@app.route('/')
async def health():
    return jsonify({"status": "active", "tracked_pools": len(known_pools)})

if __name__ == '__main__':
    try:
        app.run(host='0.0.0.0', port=10000)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        shutdown_event.set()
    finally:
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")