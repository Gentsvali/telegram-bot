import os
import logging
import sys
import asyncio
import json
import httpx
from datetime import datetime
from typing import Dict, List, Optional

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
from quart import Quart, request

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    ContextTypes, 
    MessageHandler,
    filters
)

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("aiohttp").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = [
    "TELEGRAM_TOKEN", 
    "GITHUB_TOKEN", 
    "USER_ID", 
    "WEBHOOK_URL"   
]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    error_message = (
        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    logger.error(error_message)
    raise ValueError(error_message)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_OWNER = "Gentsvali"
REPO_NAME = "telegram-bot"
FILE_PATH = "filters.json"
USER_ID = int(os.getenv("USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DLMM
DLMM_API_URL = "https://dlmm.meteora.ag/api/pools"
DLMM_UPDATE_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_FILTERS = {
    "disable_filters": False,
    "bin_steps": [20, 80, 100, 125, 250],
    "min_tvl": 10.0,
    "base_fee_min": 0.1,
    "base_fee_max": 10.0,
    "volume_1h_min": 10.0,
    "volume_5m_min": 1.0,
    "fee_tvl_ratio_24h_min": 0.1,
    "dynamic_fee_tvl_ratio_min": 0.5,
}

# –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
current_filters = DEFAULT_FILTERS.copy()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤
class PoolState:
    def __init__(self):
        self.last_checked_pools = set()
        self.pool_data = {}
        self.last_update = {}

pool_state = PoolState()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = (
    ApplicationBuilder()
    .token(TELEGRAM_TOKEN)
    .concurrent_updates(True)
    .http_version("1.1")
    .get_updates_http_version("1.1")
    .build()
)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}", exc_info=context.error)
    if update and isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def fetch_dlmm_pools() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ DLMM API"""
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.get(DLMM_API_URL)
            response.raise_for_status()
            return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤: {e}")
        return []

async def load_filters(app=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global current_filters
    try:
        if os.path.exists(FILE_PATH):
            with open(FILE_PATH, 'r') as f:
                loaded = json.load(f)
                if validate_filters(loaded):
                    current_filters.update(loaded)
                    logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
                    return
        
        if GITHUB_TOKEN:
            try:
                url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
                headers = {"Authorization": f"token {GITHUB_TOKEN}"}
                
                async with httpx.AsyncClient() as client:
                    response = await client.get(url, headers=headers)
                    if response.status_code == 200:
                        content = base64.b64decode(response.json()["content"]).decode()
                        loaded = json.loads(content)
                        if validate_filters(loaded):
                            current_filters.update(loaded)
                            with open(FILE_PATH, 'w') as f:
                                json.dump(loaded, f, indent=4)
                            logger.info("–§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub")
                            return
            except Exception as github_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub: {github_error}")

        current_filters = DEFAULT_FILTERS.copy()
        logger.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
    except Exception as e:
        current_filters = DEFAULT_FILTERS.copy()
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def validate_filters(filters: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è DLMM –ø—É–ª–æ–≤."""
    required_keys = [
        "disable_filters",
        "bin_steps",
        "min_tvl",
        "base_fee_min",
        "base_fee_max", 
        "volume_1h_min",
        "volume_5m_min",
        "fee_tvl_ratio_24h_min",
        "dynamic_fee_tvl_ratio_min"
    ]
    return all(key in filters for key in required_keys)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
application.add_error_handler(error_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Quart(__name__)

@app.before_serving
async def startup():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        await load_filters()
        
        await application.initialize()
        await application.start()
        await application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
        asyncio.create_task(track_dlmm_pools())
        
        logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

@app.after_serving
async def shutdown_app():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        if application.running:
            await application.stop()
            await application.shutdown()
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.info("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")

async def send_pool_alert(pool: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—É–ª–µ –≤ Telegram."""
    try:
        message = format_pool_message(pool)
        if message:
            await application.bot.send_message(
                chat_id=USER_ID,
                text=message,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def filter_pool(pool: dict) -> bool:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç DLMM –ø—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    if current_filters.get("disable_filters", False):
        return True

    try:
        conditions = [
            pool.get("bin_step") in current_filters["bin_steps"],
            current_filters["base_fee_min"] <= pool.get("fee", 0) <= current_filters["base_fee_max"],
            pool.get("tvl", 0) >= current_filters["min_tvl"],
            pool.get("volume_1h", 0) >= current_filters["volume_1h_min"],
            pool.get("volume_5m", 0) >= current_filters["volume_5m_min"],
            pool.get("fee_tvl_ratio_24h", 0) >= current_filters["fee_tvl_ratio_24h_min"],
            pool.get("dynamic_fee_tvl_ratio", 0) >= current_filters["dynamic_fee_tvl_ratio_min"],
        ]

        return all(conditions)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞: {e}")
        return False

def format_pool_message(pool: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
    try:
        return (
            f"‚≠êÔ∏è {pool.get('token_x_symbol', '?')}-{pool.get('token_y_symbol', '?')} "
            f"(https://dexscreener.com/solana/{pool.get('address', '')})\n"
            f"‚òÑÔ∏è –ú–µ—Ç–µ–æ—Ä—ã (https://edge.meteora.ag/dlmm/{pool.get('address', '')})\n"
            f"üü¢ –¢–í–õ - {pool.get('tvl', 0):,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (1—á) - {pool.get('volume_1h', 0):,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (5–º) - {pool.get('volume_5m', 0):,.2f} SOL\n"
            f"‚öôÔ∏è –®–∞–≥ –∫–æ—Ä–∑–∏–Ω—ã - {pool.get('bin_step', 'N/A')}\n"
            f"üí∏ –ö–æ–º–∏—Å—Å–∏—è - {pool.get('fee', 0):.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (1—á) - {pool.get('price_change_1h', 0):.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (5–º) - {pool.get('price_change_5m', 0):.2f}%"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

async def track_dlmm_pools():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–æ–≤"""
    while True:
        try:
            pools = await fetch_dlmm_pools()
            if not pools:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤")
                await asyncio.sleep(60)
                continue

            for pool in pools:
                if filter_pool(pool):
                    await send_pool_alert(pool)

            await asyncio.sleep(DLMM_UPDATE_INTERVAL)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–æ–≤: {e}")
            await asyncio.sleep(60)

async def handle_pool_change(pool_data: bytes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    required_fields = [
        'address', 'mint_x', 'mint_y', 'liquidity',
        'volume_1h', 'volume_5m', 'bin_step', 'base_fee'
    ]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not all(field in pool_data for field in required_fields):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞")
        
        address = pool_data['address']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º
        if not filter_pool(pool_data):
            logger.debug(f"–ü—É–ª {address} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞–º")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = format_pool_message(pool_data)
        if not message:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await application.bot.send_message(
            chat_id=USER_ID,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        pool_state.pool_data[address] = pool_data
        pool_state.last_update[address] = int(time.time())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–ª–∞ {pool_data.get('address', 'unknown')}: {e}")

async def save_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–∞–π–ª"""
    try:
        with open(FILE_PATH, "w") as f:
            json.dump(current_filters, f, indent=4)
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GitHub, –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ç—É–¥–∞
        if GITHUB_TOKEN:
            try:
                url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
                headers = {"Authorization": f"token {GITHUB_TOKEN}"}
                
                async with httpx.AsyncClient() as client:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞
                    response = await client.get(url, headers=headers)
                    sha = response.json().get("sha") if response.status_code == 200 else None
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    with open(FILE_PATH, "rb") as f:
                        content = base64.b64encode(f.read()).decode()
                    
                    data = {
                        "message": "Automatic filters update",
                        "content": content,
                        "sha": sha
                    }
                    await client.put(url, headers=headers, json=data)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ GitHub: {e}")

        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        logger.info(f"–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤")

async def update_filters_via_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è."""
    if update.effective_user.id != USER_ID:
        return

    try:
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π /command {json})
        text = update.message.text
        if text.startswith('/'):
            text = ' '.join(text.split()[1:])
        
        new_filters = json.loads(text)
        
        if not validate_filters(new_filters):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        for key in DEFAULT_FILTERS:
            if key in new_filters:
                current_filters[key] = new_filters[key]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await save_filters(update, context)
        await update.message.reply_text("‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ–±–Ω–æ–≤–∏–ª —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ JSON")
    
    except json.JSONDecodeError:
        example_filters = json.dumps(DEFAULT_FILTERS, indent=4)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.\n"
            f"–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON:\n```json\n{example_filters}\n```",
            parse_mode="Markdown"
        )
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

async def get_filters_json(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    if update.effective_user.id != USER_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filters_json = json.dumps(current_filters, indent=4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n```json\n{filters_json}\n```",
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /getfiltersjson: {e}", exc_info=True)

def filter_pool(pool: dict) -> bool:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DLMM –ø—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    if current_filters.get("disable_filters", False):
        return True

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        conditions = [
            pool.get("bin_step") in current_filters["bin_steps"],
            pool.get("base_fee", 0) <= current_filters["base_fee_max"],
            pool.get("tvl_sol", 0) >= current_filters["min_tvl"],
            pool.get("volume_1h_sol", 0) >= current_filters["volume_1h_min"],
            pool.get("volume_5m_sol", 0) >= current_filters["volume_5m_min"],
            pool.get("fee_tvl_ratio_24h", 0) >= current_filters["fee_tvl_ratio_24h_min"],
            pool.get("dynamic_fee_tvl_ratio", 0) >= current_filters["dynamic_fee_tvl_ratio_min"],
        ]

        return all(conditions)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É–ª–∞: {e}", exc_info=True)
        return False

def get_non_sol_token(mint_x: str, mint_y: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Solana –∏–∑ –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ DLMM –ø—É–ª–∞.
    
    Args:
        mint_x (str): –ê–¥—Ä–µ—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ base58
        mint_y (str): –ê–¥—Ä–µ—Å –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ base58
    
    Returns:
        str: –ê–¥—Ä–µ—Å –Ω–µ-SOL —Ç–æ–∫–µ–Ω–∞ –≤ base58
    """
    SOL_MINT = "So11111111111111111111111111111111111111112"
    WSOL_MINT = "So11111111111111111111111111111111111111111"  # Wrapped SOL
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ SOL
        if mint_x in (SOL_MINT, WSOL_MINT):
            return mint_y
        elif mint_y in (SOL_MINT, WSOL_MINT):
            return mint_x
        else:
            return mint_x  # –ï—Å–ª–∏ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ SOL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –Ω–µ-SOL —Ç–æ–∫–µ–Ω–∞: {e}")
        return mint_x

def format_pool_message(pool: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    Args:
        pool (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—É–ª–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ["address", "mint_x", "mint_y", "liquidity", 
                         "volume_1h", "volume_5m", "bin_step", "base_fee"]
        if not all(field in pool for field in required_fields):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        values = {
            'address': str(pool.get("address", "N/A")),
            'mint_x': str(pool.get("mint_x", "?")),
            'mint_y': str(pool.get("mint_y", "?")),
            'tvl': max(0.0, float(pool.get("liquidity", 0)) / 1e9),
            'volume_1h': max(0.0, float(pool.get("volume_1h", 0)) / 1e9),
            'volume_5m': max(0.0, float(pool.get("volume_5m", 0)) / 1e9),
            'bin_step': max(0, int(pool.get("bin_step", 0))),
            'base_fee': max(0.0, float(pool.get("base_fee", 0))),
            'price_change_1h': float(pool.get("price_change_1h", 0)),
            'price_change_5m': float(pool.get("price_change_5m", 0)),
            'fee_change_1h': float(pool.get("fee_change_1h", 0)),
            'fee_change_5m': float(pool.get("fee_change_5m", 0))
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        return (
            f"‚≠êÔ∏è {values['mint_x'][:4]}-{values['mint_y'][:4]} (https://dexscreener.com/solana/{values['address']})\n"
            f"‚òÑÔ∏è –ú–µ—Ç–µ–æ—Ä—ã (https://edge.meteora.ag/dlmm/{values['address']})\n"
            f"üòº –ù–∞–±–æ—Ä—ã (https://trench.bot/bundles/{values['mint_x']}?all=true)\n"
            f"üü¢ –¢–í–õ - {values['tvl']:,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (1—á) - {values['volume_1h']:,.2f} SOL\n"
            f"üìä –û–±—ä–µ–º (5–º) - {values['volume_5m']:,.2f} SOL\n"
            f"‚öôÔ∏è –®–∞–≥ –∫–æ—Ä–∑–∏–Ω—ã - {values['bin_step']}\n"
            f"üí∏ –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è - {values['base_fee']:.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (1—á) - {values['price_change_1h']:.2f}%\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (5–º) - {values['price_change_5m']:.2f}%\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (1—á) - {values['fee_change_1h']:.2f}%\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ (5–º) - {values['fee_change_5m']:.2f}%"
        )

    except (ValueError, TypeError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª–∞ {pool.get('address', 'N/A')}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞ {pool.get('address', 'N/A')}: {e}", exc_info=True)
        return None

async def check_new_pools(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /checkpools"""
    try:
        await track_dlmm_pools()
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É–ª–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É–ª–æ–≤")

def setup_command_handlers(application):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
    """
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(
            CommandHandler(
                "start", 
                start,
                filters=filters.User(user_id=USER_ID)
            )
        )

        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        filter_handlers = [
            CommandHandler(
                "filters", 
                show_filters,
                filters=filters.User(user_id=USER_ID)
            ),
            CommandHandler(
                "setfilter", 
                set_filter,
                filters=filters.User(user_id=USER_ID)
            ),
            CommandHandler(
                "getfiltersjson", 
                get_filters_json,
                filters=filters.User(user_id=USER_ID)
            ),
            MessageHandler(
                filters=filters.User(user_id=USER_ID) & filters.TEXT & ~filters.COMMAND,
                callback=update_filters_via_json
            )
        ]
        for handler in filter_handlers:
            application.add_handler(handler)

        # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        application.add_handler(
            CommandHandler(
                "checkpools", 
                check_new_pools,
                filters=filters.User(user_id=USER_ID)
            )
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥: {e}", exc_info=True)
        raise

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    if update.effective_user.id != USER_ID:
        return

    await update.message.reply_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/filters - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/setfilter - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
        "/getfiltersjson - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ JSON\n"
        "/checkpools - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–ª—ã"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
setup_command_handlers(application)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-—Ö—É–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
class WebhookConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–µ–±-—Ö—É–∫–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    WEBHOOK_TIMEOUT = 30  # –¢–∞–π–º-–∞—É—Ç –¥–ª—è –≤–µ–±-—Ö—É–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    MAX_RETRIES = 3      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    RETRY_DELAY = 1      # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –í–µ–±—Ö—É–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if not request.is_json:
            logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ JSON –∑–∞–ø—Ä–æ—Å")
            return {'error': 'Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json'}, 400

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        data = await request.get_json()
        if not data:
            logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON")
            return {'error': '–ü—É—Å—Ç–æ–π JSON –∑–∞–ø—Ä–æ—Å'}, 400

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
        if 'update_id' not in data:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç update_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return {'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}, 400

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for attempt in range(WebhookConfig.MAX_RETRIES):
            try:
                update = Update.de_json(data, application.bot)
                await asyncio.wait_for(
                    application.process_update(update),
                    timeout=WebhookConfig.WEBHOOK_TIMEOUT
                )
                return '', 200
            except asyncio.TimeoutError:
                if attempt == WebhookConfig.MAX_RETRIES - 1:
                    raise
                await asyncio.sleep(WebhookConfig.RETRY_DELAY)
                continue

    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞")
        return {'error': 'Timeout'}, 504
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}", exc_info=True)
        return {'error': 'Internal server error'}, 500

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π healthcheck
@app.route('/healthcheck')
async def healthcheck():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    try:
        health_status = {
            "status": "ERROR",
            "components": {
                "telegram_bot": False,
                "solana_connection": False,
                "webhook": False
            },
            "timestamp": datetime.utcnow().isoformat()
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
        if application.running:
            health_status["components"]["telegram_bot"] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
        try:
            await asyncio.wait_for(check_connection(), timeout=5)
            health_status["components"]["solana_connection"] = True
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
        try:
            webhook_info = await application.bot.get_webhook_info()
            health_status["components"]["webhook"] = bool(webhook_info.url)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if all(health_status["components"].values()):
            health_status["status"] = "OK"
            return health_status, 200
        return health_status, 503

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ healthcheck: {e}", exc_info=True)
        return {
            "status": "ERROR",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }, 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
@app.route('/')
async def home():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ."""
    try:
        return {
            "status": "OK",
            "version": "1.0.0",
            "name": "Meteora Pool Monitor",
            "description": "Telegram Bot –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É–ª–æ–≤ Meteora –Ω–∞ Solana",
            "endpoints": {
                "healthcheck": "/healthcheck",
                "webhook": f"/{TELEGRAM_TOKEN}"
            },
            "documentation": "https://github.com/yourusername/yourrepo",
            "timestamp": datetime.utcnow().isoformat()
        }, 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}", exc_info=True)
        return {"status": "ERROR", "error": str(e)}, 500

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def startup_sequence():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏."""
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana
        logger.info("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana...")
        try:
            await asyncio.wait_for(check_connection(), timeout=10)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")
            return False

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        try:
            await load_filters(None)
            logger.info("‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return False

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        try:
            await application.initialize()
            await application.start()
            await application.bot.set_webhook(f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}")
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False

        return True

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        return False

if __name__ == "__main__":
    try:
        app.run(host='0.0.0.0', port=PORT)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
